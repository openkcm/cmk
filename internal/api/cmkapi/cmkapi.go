//go:build go1.22

// Package cmkapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package cmkapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for GroupRole.
const (
	GroupRoleKEYADMINISTRATOR    GroupRole = "KEY_ADMINISTRATOR"
	GroupRoleTENANTADMINISTRATOR GroupRole = "TENANT_ADMINISTRATOR"
	GroupRoleTENANTAUDITOR       GroupRole = "TENANT_AUDITOR"
)

// Defines values for KeyAlgorithm.
const (
	KeyAlgorithmAES256  KeyAlgorithm = "AES256"
	KeyAlgorithmRSA3072 KeyAlgorithm = "RSA3072"
	KeyAlgorithmRSA4096 KeyAlgorithm = "RSA4096"
)

// Defines values for KeyState.
const (
	KeyStateDELETED         KeyState = "DELETED"
	KeyStateDISABLED        KeyState = "DISABLED"
	KeyStateENABLED         KeyState = "ENABLED"
	KeyStateFORBIDDEN       KeyState = "FORBIDDEN"
	KeyStatePENDINGDELETION KeyState = "PENDING_DELETION"
	KeyStatePENDINGIMPORT   KeyState = "PENDING_IMPORT"
	KeyStateUNKNOWN         KeyState = "UNKNOWN"
)

// Defines values for KeyType.
const (
	KeyTypeBYOK          KeyType = "BYOK"
	KeyTypeHYOK          KeyType = "HYOK"
	KeyTypeSYSTEMMANAGED KeyType = "SYSTEM_MANAGED"
)

// Defines values for SystemStatus.
const (
	SystemStatusCONNECTED    SystemStatus = "CONNECTED"
	SystemStatusDISCONNECTED SystemStatus = "DISCONNECTED"
	SystemStatusFAILED       SystemStatus = "FAILED"
	SystemStatusPROCESSING   SystemStatus = "PROCESSING"
)

// Defines values for WorkflowActionTypeEnum.
const (
	WorkflowActionTypeEnumDELETE           WorkflowActionTypeEnum = "DELETE"
	WorkflowActionTypeEnumLINK             WorkflowActionTypeEnum = "LINK"
	WorkflowActionTypeEnumSWITCH           WorkflowActionTypeEnum = "SWITCH"
	WorkflowActionTypeEnumUNLINK           WorkflowActionTypeEnum = "UNLINK"
	WorkflowActionTypeEnumUPDATEPRIMARYKEY WorkflowActionTypeEnum = "UPDATE_PRIMARY_KEY"
	WorkflowActionTypeEnumUPDATESTATE      WorkflowActionTypeEnum = "UPDATE_STATE"
)

// Defines values for WorkflowApproverDecision.
const (
	WorkflowApproverDecisionAPPROVED WorkflowApproverDecision = "APPROVED"
	WorkflowApproverDecisionPENDING  WorkflowApproverDecision = "PENDING"
	WorkflowApproverDecisionREJECTED WorkflowApproverDecision = "REJECTED"
)

// Defines values for WorkflowArtifactTypeEnum.
const (
	WorkflowArtifactTypeEnumKEY              WorkflowArtifactTypeEnum = "KEY"
	WorkflowArtifactTypeEnumKEYCONFIGURATION WorkflowArtifactTypeEnum = "KEY_CONFIGURATION"
	WorkflowArtifactTypeEnumSYSTEM           WorkflowArtifactTypeEnum = "SYSTEM"
)

// Defines values for WorkflowStateEnum.
const (
	WorkflowStateEnumEXECUTING        WorkflowStateEnum = "EXECUTING"
	WorkflowStateEnumEXPIRED          WorkflowStateEnum = "EXPIRED"
	WorkflowStateEnumFAILED           WorkflowStateEnum = "FAILED"
	WorkflowStateEnumINITIAL          WorkflowStateEnum = "INITIAL"
	WorkflowStateEnumREJECTED         WorkflowStateEnum = "REJECTED"
	WorkflowStateEnumREVOKED          WorkflowStateEnum = "REVOKED"
	WorkflowStateEnumSUCCESSFUL       WorkflowStateEnum = "SUCCESSFUL"
	WorkflowStateEnumWAITAPPROVAL     WorkflowStateEnum = "WAIT_APPROVAL"
	WorkflowStateEnumWAITCONFIRMATION WorkflowStateEnum = "WAIT_CONFIRMATION"
)

// Defines values for WorkflowTransitionTransition.
const (
	WorkflowTransitionTransitionAPPROVE WorkflowTransitionTransition = "APPROVE"
	WorkflowTransitionTransitionCONFIRM WorkflowTransitionTransition = "CONFIRM"
	WorkflowTransitionTransitionREJECT  WorkflowTransitionTransition = "REJECT"
	WorkflowTransitionTransitionREVOKE  WorkflowTransitionTransition = "REVOKE"
)

// Defines values for WrappingAlgorithmHashFunction.
const (
	WrappingAlgorithmHashFunctionSHA1   WrappingAlgorithmHashFunction = "SHA1"
	WrappingAlgorithmHashFunctionSHA256 WrappingAlgorithmHashFunction = "SHA256"
)

// Defines values for WrappingAlgorithmName.
const (
	WrappingAlgorithmNameCKMRSAAESKEYWRAP WrappingAlgorithmName = "CKM_RSA_AES_KEY_WRAP"
	WrappingAlgorithmNameCKMRSAPKCSOAEP   WrappingAlgorithmName = "CKM_RSA_PKCS_OAEP"
)

// ClientCertName The name of the crypto client using this Client Certificate
type ClientCertName = string

// ClientCertRootCA The root CA for the certificate
type ClientCertRootCA = string

// ClientCertSubject The subject of the certificate
type ClientCertSubject = string

// ClientCertificates defines model for ClientCertificates.
type ClientCertificates struct {
	Crypto        *CryptoCertificateList        `json:"crypto,omitempty"`
	TenantDefault *TenantDefaultCertificateList `json:"tenantDefault,omitempty"`
}

// CreatedAt The datetime of when the object was created (RFC3339 format)
type CreatedAt = string

// CreatorID The ID of the User who created the object
type CreatorID = openapi_types.UUID

// CreatorName The username of the User who created the object
type CreatorName = string

// CryptoCertificate A Crypto Certificate
type CryptoCertificate struct {
	// Name The name of the crypto client using this Client Certificate
	Name ClientCertName `json:"name"`

	// RootCA The root CA for the certificate
	RootCA ClientCertRootCA `json:"rootCA"`

	// Subject The subject of the certificate
	Subject ClientCertSubject `json:"subject"`
}

// CryptoCertificateList defines model for CryptoCertificateList.
type CryptoCertificateList struct {
	// Count The total number of Crypto Certificates
	Count *int                `json:"count,omitempty"`
	Value []CryptoCertificate `json:"value"`
}

// DefaultKeystore defines model for DefaultKeystore.
type DefaultKeystore struct {
	// AllowBYOK Keystore supports BYOK keys
	AllowBYOK *bool `json:"allowBYOK,omitempty"`

	// AllowManaged Keystore supports managed keys
	AllowManaged *bool `json:"allowManaged,omitempty"`

	// SupportedRegions Supported region ids
	SupportedRegions *[]string `json:"supportedRegions,omitempty"`
}

// DetailedError defines model for DetailedError.
type DetailedError struct {
	// Code Technical code of the api_errors, used to identify the api_errors condition. This value is stable and can be used to handle specific api_errors cases.
	Code string `json:"code"`

	// Context Additional context of the api_errors
	Context *map[string]interface{} `json:"context,omitempty"`
	Details *[]Error                `json:"details,omitempty"`

	// Message Human readable message describing the reason and context of the api_errors, as well as possible instructions to resolve it. This value is subject to changes over time and must not be used to handle code logic decisions.
	Message  string    `json:"message"`
	MoreInfo *[]string `json:"moreInfo,omitempty"`

	// RequestID The unique identifier of the request
	RequestID *string `json:"requestID,omitempty"`

	// Status HTTP status code
	Status int `json:"status"`

	// Target The object that the api_errors relates to
	Target *string `json:"target,omitempty"`
}

// Error A structured api_errors response
type Error struct {
	// Code Technical code of the api_errors, used to identify the api_errors condition. This value is stable and can be used to handle specific api_errors cases.
	Code string `json:"code"`

	// Context Additional context of the api_errors
	Context *map[string]interface{} `json:"context,omitempty"`

	// Message Human readable message describing the reason and context of the api_errors, as well as possible instructions to resolve it. This value is subject to changes over time and must not be used to handle code logic decisions.
	Message string `json:"message"`
}

// ErrorMessage defines model for ErrorMessage.
type ErrorMessage struct {
	Error DetailedError `json:"error"`
}

// Group defines model for Group.
type Group struct {
	// Description Description of the Group
	Description *string `json:"description,omitempty"`

	// IamIdentifier IAM Identifier. Acts as a reference to Groups in customer IAM
	IamIdentifier *string `json:"iamIdentifier,omitempty"`

	// Id The ID of the group
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name Name of the group
	Name string `json:"name"`

	// Role Role of the group
	Role GroupRole `json:"role"`
}

// GroupRole Role of the group
type GroupRole string

// GroupList defines model for GroupList.
type GroupList struct {
	// Count The total number of Groups
	Count *int    `json:"count,omitempty"`
	Value []Group `json:"value"`
}

// GroupPatch A patch for updating a group
type GroupPatch struct {
	// Description Description of the Group
	Description *string `json:"description,omitempty"`

	// Name The name of the Group
	Name *string `json:"name,omitempty"`
}

// HYOKKeystore defines model for HYOKKeystore.
type HYOKKeystore struct {
	// Allow HYOK is allowed
	Allow *bool `json:"allow,omitempty"`

	// Providers The list of supported keystores
	Providers *[]string `json:"providers,omitempty"`
}

// ImportParams Import parameters for Bring Your Own Key (BYOK) scenario.
type ImportParams struct {
	// PublicKey The public key to use to encrypt the key material before importing it to the key provider.
	PublicKey         *string            `json:"publicKey,omitempty"`
	WrappingAlgorithm *WrappingAlgorithm `json:"wrappingAlgorithm,omitempty"`
}

// Key defines model for Key.
type Key struct {
	// AccessDetails The access details for the Key
	AccessDetails *KeyAccessDetails `json:"accessDetails,omitempty"`

	// Algorithm The algorithm of the Key
	Algorithm *KeyAlgorithm `json:"algorithm,omitempty"`

	// Description The description of the Key
	Description *string `json:"description,omitempty"`

	// Enabled Flag indicating whether the Key is enabled
	Enabled *bool `json:"enabled,omitempty"`

	// Id The ID of the Key
	Id *KeyID `json:"id,omitempty"`

	// IsPrimary Flag indicating whether this Key is the primary (default) key for its associated key configuration.
	IsPrimary *bool `json:"isPrimary,omitempty"`

	// KeyConfigurationID The ID of the Key Configuration
	KeyConfigurationID KeyConfigurationID `json:"keyConfigurationID"`

	// Metadata Key metadata
	Metadata *KeyMetadata `json:"metadata,omitempty"`

	// Name The name of the Key
	Name KeyName `json:"name"`

	// NativeID The native identifier of the key in the key provider. For customer held key, this is the identifier
	// provided when registering the key. In other cases, this is auto generated; in particular, if the keystore
	// provider is AWS then this identifier is the key alias, if the keystore provider is AZURE then this is the
	// key identifier in full URL format.
	NativeID *string `json:"nativeID,omitempty"`

	// Provider The key provider indicates the service or hyperscaler that manages the keys.
	// Examples include cloud service providers like AWS, Azure, or Google Cloud, which offer key management services.
	Provider *KeyProvider `json:"provider,omitempty"`

	// Region The region where the key is stored
	Region *KeyRegion `json:"region,omitempty"`

	// State Indicates the current state of the Key/Key Version. In addition to ENABLED and DISABLED states, the states PENDING_DELETION, DELETED, FORBIDDEN and UNKNOWN are applicable only to customer held keys. Keys and Versions are in UNKNOWN state if the authentication to the customer key fails due to any reason. FORBIDDEN state is for when a HYOK customer key permission is not granted to the system.
	State *KeyState `json:"state,omitempty"`

	// Type The type of the Key.
	// - SYSTEM_MANAGED: The Key is managed by the System.
	// - BYOK: Bring Your Own Key (BYOK) is a feature that allows you to securely import cryptographic keys from your
	// own managed keystore or key vault into KMS.
	// - HYOK: Hold Your Own Key (HYOK) is a feature that allows you to register cryptographic keys from your own
	// keystore. KMS connects to your HYOK keystore and enables you to use permitted keys to encrypt data for
	// your applications.
	Type KeyType `json:"type"`
}

// KeyAccessDetails The access details for the Key
type KeyAccessDetails struct {
	// Crypto Access details for cryptographic operations.
	Crypto *map[string]interface{} `json:"crypto,omitempty"`

	// Management Access details for management operations.
	Management *map[string]interface{} `json:"management,omitempty"`
}

// KeyAlgorithm The algorithm of the Key
type KeyAlgorithm string

// KeyCommon A Key
type KeyCommon struct {
	// Description The description of the Key
	Description *string `json:"description,omitempty"`

	// Enabled Flag indicating whether the Key is enabled
	Enabled *bool `json:"enabled,omitempty"`

	// Id The ID of the Key
	Id *KeyID `json:"id,omitempty"`

	// IsPrimary Flag indicating whether this Key is the primary (default) key for its associated key configuration.
	IsPrimary *bool `json:"isPrimary,omitempty"`

	// KeyConfigurationID The ID of the Key Configuration
	KeyConfigurationID KeyConfigurationID `json:"keyConfigurationID"`

	// Metadata Key metadata
	Metadata *KeyMetadata `json:"metadata,omitempty"`

	// Name The name of the Key
	Name KeyName `json:"name"`

	// NativeID The native identifier of the key in the key provider. For customer held key, this is the identifier
	// provided when registering the key. In other cases, this is auto generated; in particular, if the keystore
	// provider is AWS then this identifier is the key alias, if the keystore provider is AZURE then this is the
	// key identifier in full URL format.
	NativeID *string `json:"nativeID,omitempty"`

	// State Indicates the current state of the Key/Key Version. In addition to ENABLED and DISABLED states, the states PENDING_DELETION, DELETED, FORBIDDEN and UNKNOWN are applicable only to customer held keys. Keys and Versions are in UNKNOWN state if the authentication to the customer key fails due to any reason. FORBIDDEN state is for when a HYOK customer key permission is not granted to the system.
	State *KeyState `json:"state,omitempty"`

	// Type The type of the Key.
	// - SYSTEM_MANAGED: The Key is managed by the System.
	// - BYOK: Bring Your Own Key (BYOK) is a feature that allows you to securely import cryptographic keys from your
	// own managed keystore or key vault into KMS.
	// - HYOK: Hold Your Own Key (HYOK) is a feature that allows you to register cryptographic keys from your own
	// keystore. KMS connects to your HYOK keystore and enables you to use permitted keys to encrypt data for
	// your applications.
	Type KeyType `json:"type"`
}

// KeyConfiguration Key Configuration
type KeyConfiguration struct {
	AdminGroup *Group `json:"adminGroup,omitempty"`

	// AdminGroupID The ID of the Group of Users responsible for managing the Key Configuration
	AdminGroupID openapi_types.UUID `json:"adminGroupID"`

	// CanConnectSystems Identifies if key configuration can connect to a system
	CanConnectSystems *bool `json:"canConnectSystems,omitempty"`

	// Description The description of the Key Configuration
	Description *string `json:"description,omitempty"`

	// Id The ID of the Key Configuration
	Id *KeyConfigurationIDReadOnly `json:"id,omitempty"`

	// Metadata Key Configuration metadata
	Metadata *KeyConfigurationMetadata `json:"metadata,omitempty"`

	// Name The name of the Key Configuration
	Name string `json:"name"`

	// PrimaryKeyID The ID of the primary key of the configuration
	PrimaryKeyID *openapi_types.UUID `json:"primaryKeyID,omitempty"`
}

// KeyConfigurationID The ID of the Key Configuration
type KeyConfigurationID = openapi_types.UUID

// KeyConfigurationIDReadOnly The ID of the Key Configuration
type KeyConfigurationIDReadOnly = openapi_types.UUID

// KeyConfigurationList defines model for KeyConfigurationList.
type KeyConfigurationList struct {
	// Count The total number of Key Configurations
	Count *int               `json:"count,omitempty"`
	Value []KeyConfiguration `json:"value"`
}

// KeyConfigurationMetadata Key Configuration metadata
type KeyConfigurationMetadata struct {
	// CreatedAt The datetime of when the object was created (RFC3339 format)
	CreatedAt *CreatedAt `json:"createdAt,omitempty"`

	// CreatorID The ID of the User who created the object
	CreatorID *CreatorID `json:"creatorID,omitempty"`

	// CreatorName The username of the User who created the object
	CreatorName *CreatorName `json:"creatorName,omitempty"`

	// TotalKeys The number of Keys of the Key Configuration
	TotalKeys *int `json:"totalKeys,omitempty"`

	// TotalSystems The number of Systems connected to the Key Configuration
	TotalSystems *int `json:"totalSystems,omitempty"`

	// UpdatedAt The datetime of when the object was last updated, enabled, or disabled (RFC3339 format)
	UpdatedAt *UpdatedAt `json:"updatedAt,omitempty"`
}

// KeyConfigurationPatch A patch for updating a Key Configuration
type KeyConfigurationPatch struct {
	// Description The description of the Key Configuration
	Description *string `json:"description,omitempty"`

	// Name The name of the Key Configuration
	Name *string `json:"name,omitempty"`
}

// KeyID The ID of the Key
type KeyID = openapi_types.UUID

// KeyImport A request to import a key material
type KeyImport struct {
	// WrappedKeyMaterial The wrapped key material to import
	WrappedKeyMaterial string `json:"wrappedKeyMaterial"`
}

// KeyList defines model for KeyList.
type KeyList struct {
	// Count The total number of Keys
	Count *int  `json:"count,omitempty"`
	Value []Key `json:"value"`
}

// KeyMetadata Key metadata
type KeyMetadata struct {
	// CreatedAt The datetime of when the object was created (RFC3339 format)
	CreatedAt *CreatedAt `json:"createdAt,omitempty"`

	// PrimaryVersion The number of the primary Key Version
	PrimaryVersion *KeyPrimaryVersion `json:"primaryVersion,omitempty"`

	// TotalVersions The number of Versions of the Key
	TotalVersions *KeyTotalVersions `json:"totalVersions,omitempty"`

	// UpdatedAt The datetime of when the object was last updated, enabled, or disabled (RFC3339 format)
	UpdatedAt *UpdatedAt `json:"updatedAt,omitempty"`
}

// KeyName The name of the Key
type KeyName = string

// KeyPatch A patch for updating a Key
type KeyPatch struct {
	// Description The description of the Key
	Description *string `json:"description,omitempty"`

	// Enabled Flag indicating whether the Key is enabled
	Enabled *bool `json:"enabled,omitempty"`

	// IsPrimary Flag indicating whether this Key is the primary (default) key for its associated key configuration.
	IsPrimary *bool `json:"isPrimary,omitempty"`

	// Name The name of the Key
	Name *string `json:"name,omitempty"`
}

// KeyPrimaryVersion The number of the primary Key Version
type KeyPrimaryVersion = int

// KeyProvider The key provider indicates the service or hyperscaler that manages the keys.
// Examples include cloud service providers like AWS, Azure, or Google Cloud, which offer key management services.
type KeyProvider = string

// KeyRegion The region where the key is stored
type KeyRegion = string

// KeyRotationBody Additional request body that is required for rotation of customer held keys. Must not be provided for non-customer held keys.
type KeyRotationBody struct {
	// NativeID The native identifier of the key to register. For AWS, this is either the key ID or the full key ARN.
	NativeID *string `json:"nativeID,omitempty"`
}

// KeyState Indicates the current state of the Key/Key Version. In addition to ENABLED and DISABLED states, the states PENDING_DELETION, DELETED, FORBIDDEN and UNKNOWN are applicable only to customer held keys. Keys and Versions are in UNKNOWN state if the authentication to the customer key fails due to any reason. FORBIDDEN state is for when a HYOK customer key permission is not granted to the system.
type KeyState string

// KeyTotalVersions The number of Versions of the Key
type KeyTotalVersions = int

// KeyType The type of the Key.
// - SYSTEM_MANAGED: The Key is managed by the System.
// - BYOK: Bring Your Own Key (BYOK) is a feature that allows you to securely import cryptographic keys from your
// own managed keystore or key vault into KMS.
// - HYOK: Hold Your Own Key (HYOK) is a feature that allows you to register cryptographic keys from your own
// keystore. KMS connects to your HYOK keystore and enables you to use permitted keys to encrypt data for
// your applications.
type KeyType string

// KeyVersion A Key Version
type KeyVersion struct {
	// IsPrimary Indicates if this Version is the primary Version of the Key
	IsPrimary *bool `json:"isPrimary,omitempty"`

	// Metadata Key Version metadata
	Metadata *KeyVersionMetadata `json:"metadata,omitempty"`

	// NativeID The native identifier of the key to register. For AWS, this is either the key ID or
	// the full key ARN.
	NativeID *string `json:"nativeID,omitempty"`

	// Version The Version number of the Key
	Version *int `json:"version,omitempty"`
}

// KeyVersionList defines model for KeyVersionList.
type KeyVersionList struct {
	// Count The total number of Key Versions
	Count *int         `json:"count,omitempty"`
	Value []KeyVersion `json:"value"`
}

// KeyVersionMetadata Key Version metadata
type KeyVersionMetadata struct {
	// CreatedAt The datetime of when the object was created (RFC3339 format)
	CreatedAt *CreatedAt `json:"createdAt,omitempty"`

	// UpdatedAt The datetime of when the object was last updated, enabled, or disabled (RFC3339 format)
	UpdatedAt *UpdatedAt `json:"updatedAt,omitempty"`
}

// Label A Label as a key-value pair
type Label struct {
	// Key A name of a Label
	Key string `json:"key"`

	// Value A value associated with the Label
	Value *string `json:"value,omitempty"`
}

// LabelList A complete list of the Labels associated with a Key along with the count of Labels.
type LabelList struct {
	Count int     `json:"count"`
	Value []Label `json:"value"`
}

// LabelsPostOrPatch defines model for LabelsPostOrPatch.
type LabelsPostOrPatch = []Label

// System A System object
type System struct {
	// ID The ID of System entity
	ID *ID `json:"id,omitempty"`

	// Identifier The identifier of the System entity
	Identifier *Identifier `json:"identifier,omitempty"`

	// KeyConfigurationID The ID of the Key Configuration
	KeyConfigurationID *KeyConfigurationID `json:"keyConfigurationID,omitempty"`

	// KeyConfigurationName The name of the key configuration
	KeyConfigurationName *string                 `json:"keyConfigurationName,omitempty"`
	Properties           *map[string]interface{} `json:"properties,omitempty"`

	// Region The region of the System
	Region string `json:"region"`

	// Status The status of the System
	Status SystemStatus `json:"status"`

	// Type The type of the System
	Type string `json:"type"`
}

// SystemStatus The status of the System
type SystemStatus string

// ID The ID of System entity
type ID = openapi_types.UUID

// Identifier The identifier of the System entity
type Identifier = string

// SystemLink defines model for SystemLink.
type SystemLink struct {
	// KeyConfigurationID The ID of the Key Configuration
	KeyConfigurationID *KeyConfigurationID `json:"keyConfigurationID,omitempty"`
}

// SystemList defines model for SystemList.
type SystemList struct {
	// Count The total number of Systems
	Count *int `json:"count,omitempty"`

	// SystemsDataRefreshed Indicates whether systems data was synchronized with external system
	SystemsDataRefreshed bool     `json:"systemsDataRefreshed"`
	Value                []System `json:"value"`
}

// SystemPatch Request to update a System object.
type SystemPatch struct {
	// KeyConfigurationID The ID of the Key Configuration
	KeyConfigurationID KeyConfigurationID `json:"keyConfigurationID"`
}

// TagList A list of tags
type TagList struct {
	// Count The total number of tags
	Count *int     `json:"count,omitempty"`
	Value []string `json:"value"`
}

// Tags defines model for Tags.
type Tags struct {
	// Tags List of tags to be added
	Tags []string `json:"tags"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Id The ID of tenant
	Id *string `json:"id,omitempty"`

	// Name Name of the tenant
	Name string `json:"name"`

	// Region Regiono of the tenant
	Region string `json:"region"`
}

// TenantDefaultCertificate A Tenant Default Certificate
type TenantDefaultCertificate struct {
	// Name The name of the crypto client using this Client Certificate
	Name ClientCertName `json:"name"`

	// RootCA The root CA for the certificate
	RootCA ClientCertRootCA `json:"rootCA"`

	// Subject The subject of the certificate
	Subject ClientCertSubject `json:"subject"`
}

// TenantDefaultCertificateList defines model for TenantDefaultCertificateList.
type TenantDefaultCertificateList struct {
	// Count The total number of Client Certificates
	Count *int                       `json:"count,omitempty"`
	Value []TenantDefaultCertificate `json:"value"`
}

// TenantKeystore defines model for TenantKeystore.
type TenantKeystore struct {
	Default *DefaultKeystore `json:"default,omitempty"`
	Hyok    HYOKKeystore     `json:"hyok"`
}

// TenantList defines model for TenantList.
type TenantList struct {
	// Count The total number of Tenants
	Count *int     `json:"count,omitempty"`
	Value []Tenant `json:"value"`
}

// UpdatedAt The datetime of when the object was last updated, enabled, or disabled (RFC3339 format)
type UpdatedAt = string

// Workflow defines model for Workflow.
type Workflow struct {
	ActionType WorkflowActionType `json:"actionType"`

	// ArtifactID The ID of the artifact that the Workflow is associated with
	ArtifactID   openapi_types.UUID   `json:"artifactID"`
	ArtifactType WorkflowArtifactType `json:"artifactType"`

	// FailureReason The reason for the failure of the Workflow
	FailureReason *string `json:"failureReason,omitempty"`

	// Id The ID of the Workflow
	Id *openapi_types.UUID `json:"id,omitempty"`

	// InitiatorID The ID of the User who initiated the Workflow
	InitiatorID *openapi_types.UUID `json:"initiatorID,omitempty"`

	// InitiatorName The name of the User who initiated the Workflow
	InitiatorName *string           `json:"initiatorName,omitempty"`
	Metadata      *WorkflowMetadata `json:"metadata,omitempty"`

	// Parameters Parameters required to execute the Workflow
	Parameters *string        `json:"parameters,omitempty"`
	State      *WorkflowState `json:"state,omitempty"`
}

// WorkflowActionType defines model for WorkflowActionType.
type WorkflowActionType = WorkflowActionTypeEnum

// WorkflowActionTypeEnum defines model for WorkflowActionTypeEnum.
type WorkflowActionTypeEnum string

// WorkflowApprover defines model for WorkflowApprover.
type WorkflowApprover struct {
	// Decision The decision of the approver
	Decision WorkflowApproverDecision `json:"decision"`

	// Id The UUID of the Workflow approver.
	Id openapi_types.UUID `json:"id"`

	// Name The name of the approver
	Name *string `json:"name,omitempty"`
}

// WorkflowApproverDecision The decision of the approver
type WorkflowApproverDecision string

// WorkflowApproverAdd defines model for WorkflowApproverAdd.
type WorkflowApproverAdd struct {
	// Approvers List of approvers to be added
	Approvers []WorkflowApprover `json:"approvers"`
}

// WorkflowApproverList Approvers of a certain Workflow
type WorkflowApproverList struct {
	// Count The total number of approvers
	Count *int               `json:"count,omitempty"`
	Value []WorkflowApprover `json:"value"`
}

// WorkflowArtifactType defines model for WorkflowArtifactType.
type WorkflowArtifactType = WorkflowArtifactTypeEnum

// WorkflowArtifactTypeEnum defines model for WorkflowArtifactTypeEnum.
type WorkflowArtifactTypeEnum string

// WorkflowList defines model for WorkflowList.
type WorkflowList struct {
	// Count The total number of Workflows
	Count *int       `json:"count,omitempty"`
	Value []Workflow `json:"value"`
}

// WorkflowMetadata defines model for WorkflowMetadata.
type WorkflowMetadata struct {
	// CreatedAt The datetime of when the object was created (RFC3339 format)
	CreatedAt *CreatedAt `json:"createdAt,omitempty"`

	// UpdatedAt The datetime of when the object was last updated, enabled, or disabled (RFC3339 format)
	UpdatedAt *UpdatedAt `json:"updatedAt,omitempty"`
}

// WorkflowState defines model for WorkflowState.
type WorkflowState = WorkflowStateEnum

// WorkflowStateEnum defines model for WorkflowStateEnum.
type WorkflowStateEnum string

// WorkflowTransition defines model for WorkflowTransition.
type WorkflowTransition struct {
	// Transition Transition to be executed
	Transition WorkflowTransitionTransition `json:"transition"`
}

// WorkflowTransitionTransition Transition to be executed
type WorkflowTransitionTransition string

// WrappingAlgorithm defines model for WrappingAlgorithm.
type WrappingAlgorithm struct {
	// HashFunction Hash function used with the algorithm.
	HashFunction WrappingAlgorithmHashFunction `json:"hashFunction"`

	// Name Algorithm based on PKCS#11 specification, more information can be found
	// [here](https://docs.oasis-open.org/pkcs11/pkcs11-curr/v2.40/cos01/pkcs11-curr-v2.40-cos01.html).
	//
	// - `CKM_RSA_PKCS_OAEP`: A multi-purpose mechanism based on the RSA public-key cryptosystem and the
	// OAEP ((Optimal Asymmetric Encryption Padding) block format defined in PKCS #1.
	// - `CKM_RSA_AES_KEY_WRAP`: A mechanism based on the RSA public-key cryptosystem and the AES key wrap
	// mechanism.
	Name WrappingAlgorithmName `json:"name"`
}

// WrappingAlgorithmHashFunction Hash function used with the algorithm.
type WrappingAlgorithmHashFunction string

// WrappingAlgorithmName Algorithm based on PKCS#11 specification, more information can be found
// [here](https://docs.oasis-open.org/pkcs11/pkcs11-curr/v2.40/cos01/pkcs11-curr-v2.40-cos01.html).
//
// - `CKM_RSA_PKCS_OAEP`: A multi-purpose mechanism based on the RSA public-key cryptosystem and the
// OAEP ((Optimal Asymmetric Encryption Padding) block format defined in PKCS #1.
// - `CKM_RSA_AES_KEY_WRAP`: A mechanism based on the RSA public-key cryptosystem and the AES key wrap
// mechanism.
type WrappingAlgorithmName string

// CountPath defines model for countPath.
type CountPath = bool

// GroupIDPath defines model for groupIDPath.
type GroupIDPath = openapi_types.UUID

// KeyConfigurationIDPath defines model for keyConfigurationIDPath.
type KeyConfigurationIDPath = openapi_types.UUID

// KeyIDPath defines model for keyIDPath.
type KeyIDPath = openapi_types.UUID

// KeyVersionNumberPath defines model for keyVersionNumberPath.
type KeyVersionNumberPath = string

// SkipPath defines model for skipPath.
type SkipPath = int

// SystemIDPath defines model for systemIDPath.
type SystemIDPath = openapi_types.UUID

// TopPath defines model for topPath.
type TopPath = int

// WorkflowIDPath defines model for workflowIDPath.
type WorkflowIDPath = openapi_types.UUID

// N400 defines model for 400.
type N400 = ErrorMessage

// N401 defines model for 401.
type N401 = ErrorMessage

// N403 defines model for 403.
type N403 = ErrorMessage

// N404 defines model for 404.
type N404 = ErrorMessage

// N409 defines model for 409.
type N409 = ErrorMessage

// N500 defines model for 500.
type N500 = ErrorMessage

// GetGroupsParams defines parameters for GetGroups.
type GetGroupsParams struct {
	// Skip The number of results to skip (default is 0)
	Skip *SkipPath `form:"$skip,omitempty" json:"$skip,omitempty"`

	// Top The number of results to return (default is 20)
	Top *TopPath `form:"$top,omitempty" json:"$top,omitempty"`

	// Count Flag indicating whether to return the total number of results in the queried collection. Using pagination query
	// parameters $skip and $top will not affect this, i.e. the number of returned elements might be smaller than the
	// count value.
	Count *CountPath `form:"$count,omitempty" json:"$count,omitempty"`
}

// GetKeyLabelsParams defines parameters for GetKeyLabels.
type GetKeyLabelsParams struct {
	// Top The number of results to return (default is 20)
	Top *TopPath `form:"$top,omitempty" json:"$top,omitempty"`

	// Skip The number of results to skip (default is 0)
	Skip *SkipPath `form:"$skip,omitempty" json:"$skip,omitempty"`

	// Count Flag indicating whether to return the total number of results in the queried collection. Using pagination query
	// parameters $skip and $top will not affect this, i.e. the number of returned elements might be smaller than the
	// count value.
	Count *CountPath `form:"$count,omitempty" json:"$count,omitempty"`
}

// GetKeyConfigurationsParams defines parameters for GetKeyConfigurations.
type GetKeyConfigurationsParams struct {
	ExpandGroup *bool `form:"expandGroup,omitempty" json:"expandGroup,omitempty"`

	// Skip The number of results to skip (default is 0)
	Skip *SkipPath `form:"$skip,omitempty" json:"$skip,omitempty"`

	// Top The number of results to return (default is 20)
	Top *TopPath `form:"$top,omitempty" json:"$top,omitempty"`

	// Count Flag indicating whether to return the total number of results in the queried collection. Using pagination query
	// parameters $skip and $top will not affect this, i.e. the number of returned elements might be smaller than the
	// count value.
	Count *CountPath `form:"$count,omitempty" json:"$count,omitempty"`
}

// GetKeyConfigurationsCertificatesParams defines parameters for GetKeyConfigurationsCertificates.
type GetKeyConfigurationsCertificatesParams struct {
	// Skip The number of results to skip (default is 0)
	Skip *SkipPath `form:"$skip,omitempty" json:"$skip,omitempty"`

	// Top The number of results to return (default is 20)
	Top *TopPath `form:"$top,omitempty" json:"$top,omitempty"`

	// Count Flag indicating whether to return the total number of results in the queried collection. Using pagination query
	// parameters $skip and $top will not affect this, i.e. the number of returned elements might be smaller than the
	// count value.
	Count *CountPath `form:"$count,omitempty" json:"$count,omitempty"`
}

// GetTagsForKeyConfigurationParams defines parameters for GetTagsForKeyConfiguration.
type GetTagsForKeyConfigurationParams struct {
	// Skip The number of results to skip (default is 0)
	Skip *SkipPath `form:"$skip,omitempty" json:"$skip,omitempty"`

	// Top The number of results to return (default is 20)
	Top *TopPath `form:"$top,omitempty" json:"$top,omitempty"`

	// Count Flag indicating whether to return the total number of results in the queried collection. Using pagination query
	// parameters $skip and $top will not affect this, i.e. the number of returned elements might be smaller than the
	// count value.
	Count *CountPath `form:"$count,omitempty" json:"$count,omitempty"`
}

// GetKeysParams defines parameters for GetKeys.
type GetKeysParams struct {
	// KeyConfigurationID Filter by Key Configuration ID
	KeyConfigurationID *openapi_types.UUID `form:"keyConfigurationID,omitempty" json:"keyConfigurationID,omitempty"`

	// Skip The number of results to skip (default is 0)
	Skip *SkipPath `form:"$skip,omitempty" json:"$skip,omitempty"`

	// Top The number of results to return (default is 20)
	Top *TopPath `form:"$top,omitempty" json:"$top,omitempty"`

	// Count Flag indicating whether to return the total number of results in the queried collection. Using pagination query
	// parameters $skip and $top will not affect this, i.e. the number of returned elements might be smaller than the
	// count value.
	Count *CountPath `form:"$count,omitempty" json:"$count,omitempty"`
}

// GetKeyVersionsParams defines parameters for GetKeyVersions.
type GetKeyVersionsParams struct {
	// Skip The number of results to skip (default is 0)
	Skip *SkipPath `form:"$skip,omitempty" json:"$skip,omitempty"`

	// Top The number of results to return (default is 20)
	Top *TopPath `form:"$top,omitempty" json:"$top,omitempty"`

	// Count Flag indicating whether to return the total number of results in the queried collection. Using pagination query
	// parameters $skip and $top will not affect this, i.e. the number of returned elements might be smaller than the
	// count value.
	Count *CountPath `form:"$count,omitempty" json:"$count,omitempty"`
}

// GetAllSystemsParams defines parameters for GetAllSystems.
type GetAllSystemsParams struct {
	// Skip The number of results to skip (default is 0)
	Skip *SkipPath `form:"$skip,omitempty" json:"$skip,omitempty"`

	// Top The number of results to return (default is 20)
	Top *TopPath `form:"$top,omitempty" json:"$top,omitempty"`

	// Count Flag indicating whether to return the total number of results in the queried collection. Using pagination query
	// parameters $skip and $top will not affect this, i.e. the number of returned elements might be smaller than the
	// count value.
	Count *CountPath `form:"$count,omitempty" json:"$count,omitempty"`

	// KeyConfigurationID Filter by Key Configuration ID
	KeyConfigurationID *openapi_types.UUID `form:"keyConfigurationID,omitempty" json:"keyConfigurationID,omitempty"`

	// Region Filter by System region
	Region *string `form:"Region,omitempty" json:"Region,omitempty"`

	// Type Filter by System Type
	Type *string `form:"Type,omitempty" json:"Type,omitempty"`
}

// GetTenantsParams defines parameters for GetTenants.
type GetTenantsParams struct {
	// Skip The number of results to skip (default is 0)
	Skip *SkipPath `form:"$skip,omitempty" json:"$skip,omitempty"`

	// Top The number of results to return (default is 20)
	Top *TopPath `form:"$top,omitempty" json:"$top,omitempty"`

	// Count Flag indicating whether to return the total number of results in the queried collection. Using pagination query
	// parameters $skip and $top will not affect this, i.e. the number of returned elements might be smaller than the
	// count value.
	Count *CountPath `form:"$count,omitempty" json:"$count,omitempty"`
}

// GetWorkflowsParams defines parameters for GetWorkflows.
type GetWorkflowsParams struct {
	// Top The number of results to return (default is 20)
	Top *TopPath `form:"$top,omitempty" json:"$top,omitempty"`

	// Skip The number of results to skip (default is 0)
	Skip *SkipPath `form:"$skip,omitempty" json:"$skip,omitempty"`

	// Count Flag indicating whether to return the total number of results in the queried collection. Using pagination query
	// parameters $skip and $top will not affect this, i.e. the number of returned elements might be smaller than the
	// count value.
	Count *CountPath `form:"$count,omitempty" json:"$count,omitempty"`

	// UserID The ID of the User initiating the Workflow (only temporary until authentication is implemented)
	UserID *openapi_types.UUID `form:"UserID,omitempty" json:"UserID,omitempty"`

	// ArtifactID The ID of the artifact that the Workflow is associated with
	ArtifactID *openapi_types.UUID `form:"ArtifactID,omitempty" json:"ArtifactID,omitempty"`

	// State The current state of the Workflow
	State *WorkflowStateEnum `form:"State,omitempty" json:"State,omitempty"`

	// ArtifactType The type of artifact that the Workflow is associated with
	ArtifactType *WorkflowArtifactTypeEnum `form:"ArtifactType,omitempty" json:"ArtifactType,omitempty"`

	// ActionType The type of Action that the Workflow is associated with
	ActionType *WorkflowActionTypeEnum `form:"ActionType,omitempty" json:"ActionType,omitempty"`
}

// CreateWorkflowParams defines parameters for CreateWorkflow.
type CreateWorkflowParams struct {
	// UserID The ID of the User initiating the Workflow (only temporary until authentication is implemented)
	UserID openapi_types.UUID `json:"User-ID"`
}

// ListWorkflowApproversByWorkflowIDParams defines parameters for ListWorkflowApproversByWorkflowID.
type ListWorkflowApproversByWorkflowIDParams struct {
	// Top The number of results to return (default is 20)
	Top *TopPath `form:"$top,omitempty" json:"$top,omitempty"`

	// Skip The number of results to skip (default is 0)
	Skip *SkipPath `form:"$skip,omitempty" json:"$skip,omitempty"`

	// Count Flag indicating whether to return the total number of results in the queried collection. Using pagination query
	// parameters $skip and $top will not affect this, i.e. the number of returned elements might be smaller than the
	// count value.
	Count *CountPath `form:"$count,omitempty" json:"$count,omitempty"`
}

// AddWorkflowApproversByWorkflowIDParams defines parameters for AddWorkflowApproversByWorkflowID.
type AddWorkflowApproversByWorkflowIDParams struct {
	// UserID The ID of the User who initiated the Workflow (only temporary until authentication is implemented)
	UserID openapi_types.UUID `json:"User-ID"`
}

// TransitionWorkflowParams defines parameters for TransitionWorkflow.
type TransitionWorkflowParams struct {
	// UserID The ID of the User executing the transition (only temporary until authentication is implemented)
	UserID openapi_types.UUID `json:"User-ID"`
}

// CreateGroupJSONRequestBody defines body for CreateGroup for application/json ContentType.
type CreateGroupJSONRequestBody = Group

// UpdateGroupApplicationMergePatchPlusJSONRequestBody defines body for UpdateGroup for application/merge-patch+json ContentType.
type UpdateGroupApplicationMergePatchPlusJSONRequestBody = GroupPatch

// CreateOrUpdateLabelsJSONRequestBody defines body for CreateOrUpdateLabels for application/json ContentType.
type CreateOrUpdateLabelsJSONRequestBody = LabelsPostOrPatch

// PostKeyConfigurationsJSONRequestBody defines body for PostKeyConfigurations for application/json ContentType.
type PostKeyConfigurationsJSONRequestBody = KeyConfiguration

// UpdateKeyConfigurationByIDApplicationMergePatchPlusJSONRequestBody defines body for UpdateKeyConfigurationByID for application/merge-patch+json ContentType.
type UpdateKeyConfigurationByIDApplicationMergePatchPlusJSONRequestBody = KeyConfigurationPatch

// AddTagsToKeyConfigurationJSONRequestBody defines body for AddTagsToKeyConfiguration for application/json ContentType.
type AddTagsToKeyConfigurationJSONRequestBody = Tags

// PostKeysJSONRequestBody defines body for PostKeys for application/json ContentType.
type PostKeysJSONRequestBody = Key

// UpdateKeyApplicationMergePatchPlusJSONRequestBody defines body for UpdateKey for application/merge-patch+json ContentType.
type UpdateKeyApplicationMergePatchPlusJSONRequestBody = KeyPatch

// ImportKeyMaterialJSONRequestBody defines body for ImportKeyMaterial for application/json ContentType.
type ImportKeyMaterialJSONRequestBody = KeyImport

// CreateKeyVersionJSONRequestBody defines body for CreateKeyVersion for application/json ContentType.
type CreateKeyVersionJSONRequestBody = KeyRotationBody

// PatchSystemLinkByIDApplicationMergePatchPlusJSONRequestBody defines body for PatchSystemLinkByID for application/merge-patch+json ContentType.
type PatchSystemLinkByIDApplicationMergePatchPlusJSONRequestBody = SystemPatch

// CreateWorkflowJSONRequestBody defines body for CreateWorkflow for application/json ContentType.
type CreateWorkflowJSONRequestBody = Workflow

// AddWorkflowApproversByWorkflowIDJSONRequestBody defines body for AddWorkflowApproversByWorkflowID for application/json ContentType.
type AddWorkflowApproversByWorkflowIDJSONRequestBody = WorkflowApproverAdd

// TransitionWorkflowJSONRequestBody defines body for TransitionWorkflow for application/json ContentType.
type TransitionWorkflowJSONRequestBody = WorkflowTransition

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Groups
	// (GET /groups)
	GetGroups(w http.ResponseWriter, r *http.Request, params GetGroupsParams)
	// Create a new Group
	// (POST /groups)
	CreateGroup(w http.ResponseWriter, r *http.Request)
	// Delete a Group by its ID
	// (DELETE /groups/{groupID})
	DeleteGroupByID(w http.ResponseWriter, r *http.Request, groupID GroupIDPath)
	// Get Group by ID
	// (GET /groups/{groupID})
	GetGroupByID(w http.ResponseWriter, r *http.Request, groupID GroupIDPath)
	// Update group
	// (PATCH /groups/{groupID})
	UpdateGroup(w http.ResponseWriter, r *http.Request, groupID GroupIDPath)
	// Delete a specified Label from a Key
	// (DELETE /key/{keyID}/label/{labelName})
	DeleteLabel(w http.ResponseWriter, r *http.Request, keyID KeyIDPath, labelName string)
	// Get the Labels associated with the Key
	// (GET /key/{keyID}/labels)
	GetKeyLabels(w http.ResponseWriter, r *http.Request, keyID KeyIDPath, params GetKeyLabelsParams)
	// Create and update Labels
	// (POST /key/{keyID}/labels)
	CreateOrUpdateLabels(w http.ResponseWriter, r *http.Request, keyID KeyIDPath)
	// Get all Key Configurations
	// (GET /keyConfigurations)
	GetKeyConfigurations(w http.ResponseWriter, r *http.Request, params GetKeyConfigurationsParams)
	// Create a new Key Configuration
	// (POST /keyConfigurations)
	PostKeyConfigurations(w http.ResponseWriter, r *http.Request)
	// Delete an Key Configuration by its ID
	// (DELETE /keyConfigurations/{keyConfigurationID})
	DeleteKeyConfigurationByID(w http.ResponseWriter, r *http.Request, keyConfigurationID KeyConfigurationIDPath)
	// Get Key Configuration metadata by ID
	// (GET /keyConfigurations/{keyConfigurationID})
	GetKeyConfigurationByID(w http.ResponseWriter, r *http.Request, keyConfigurationID KeyConfigurationIDPath)
	// Update Key Configuration metadata by ID
	// (PATCH /keyConfigurations/{keyConfigurationID})
	UpdateKeyConfigurationByID(w http.ResponseWriter, r *http.Request, keyConfigurationID KeyConfigurationIDPath)
	// Get the client certificate details
	// (GET /keyConfigurations/{keyConfigurationID}/certificates)
	GetKeyConfigurationsCertificates(w http.ResponseWriter, r *http.Request, keyConfigurationID KeyConfigurationIDPath, params GetKeyConfigurationsCertificatesParams)
	// Get list of Tags for a Key Configuration
	// (GET /keyConfigurations/{keyConfigurationID}/tags)
	GetTagsForKeyConfiguration(w http.ResponseWriter, r *http.Request, keyConfigurationID KeyConfigurationIDPath, params GetTagsForKeyConfigurationParams)
	// Either set new Tags or replace Tags for a Key Configuration
	// (PUT /keyConfigurations/{keyConfigurationID}/tags)
	AddTagsToKeyConfiguration(w http.ResponseWriter, r *http.Request, keyConfigurationID KeyConfigurationIDPath)
	// Get metadata of Keys
	// (GET /keys)
	GetKeys(w http.ResponseWriter, r *http.Request, params GetKeysParams)
	// Create a new Key
	// (POST /keys)
	PostKeys(w http.ResponseWriter, r *http.Request)
	// Delete an Key by its ID
	// (DELETE /keys/{keyID})
	DeleteKeysKeyID(w http.ResponseWriter, r *http.Request, keyID KeyIDPath)
	// Get Key metadata by ID
	// (GET /keys/{keyID})
	GetKeysKeyID(w http.ResponseWriter, r *http.Request, keyID KeyIDPath)
	// Update Key metadata by ID
	// (PATCH /keys/{keyID})
	UpdateKey(w http.ResponseWriter, r *http.Request, keyID KeyIDPath)
	// Import a key material
	// (POST /keys/{keyID}/importKeyMaterial)
	ImportKeyMaterial(w http.ResponseWriter, r *http.Request, keyID KeyIDPath)
	// Get import parameters for a Bring Your Own Key (BYOK) key
	// (GET /keys/{keyID}/importParams)
	GetKeyImportParams(w http.ResponseWriter, r *http.Request, keyID KeyIDPath)
	// Get metadata of all Key Versions by Key ID
	// (GET /keys/{keyID}/versions)
	GetKeyVersions(w http.ResponseWriter, r *http.Request, keyID KeyIDPath, params GetKeyVersionsParams)
	// Create a new Key Version
	// (POST /keys/{keyID}/versions)
	CreateKeyVersion(w http.ResponseWriter, r *http.Request, keyID KeyIDPath)
	// Get metadata of a key Version by key ID and Version number
	// (GET /keys/{keyID}/versions/{version})
	GetKeyVersionByNumber(w http.ResponseWriter, r *http.Request, keyID KeyIDPath, version KeyVersionNumberPath)
	// Retrieve all Systems
	// (GET /systems)
	GetAllSystems(w http.ResponseWriter, r *http.Request, params GetAllSystemsParams)
	// Retrieve a System
	// (GET /systems/{systemID})
	GetSystemByID(w http.ResponseWriter, r *http.Request, systemID SystemIDPath)
	// Delete a System link
	// (DELETE /systems/{systemID}/link)
	DeleteSystemLinkByID(w http.ResponseWriter, r *http.Request, systemID SystemIDPath)
	// Retrieve a System link
	// (GET /systems/{systemID}/link)
	GetSystemLinkByID(w http.ResponseWriter, r *http.Request, systemID SystemIDPath)
	// Update a System link
	// (PATCH /systems/{systemID}/link)
	PatchSystemLinkByID(w http.ResponseWriter, r *http.Request, systemID SystemIDPath)
	// Get the tenants
	// (GET /tenants)
	GetTenants(w http.ResponseWriter, r *http.Request, params GetTenantsParams)
	// Get tenant keystores
	// (GET /tenants/keystores)
	GetTenantsKeystores(w http.ResponseWriter, r *http.Request)
	// Get all Workflows
	// (GET /workflows)
	GetWorkflows(w http.ResponseWriter, r *http.Request, params GetWorkflowsParams)
	// Create a new Workflow
	// (POST /workflows)
	CreateWorkflow(w http.ResponseWriter, r *http.Request, params CreateWorkflowParams)
	// Get a Workflow
	// (GET /workflows/{workflowID})
	GetWorkflowByID(w http.ResponseWriter, r *http.Request, workflowID WorkflowIDPath)
	// Get the list of Workflow approvers.
	// (GET /workflows/{workflowID}/approvers)
	ListWorkflowApproversByWorkflowID(w http.ResponseWriter, r *http.Request, workflowID WorkflowIDPath, params ListWorkflowApproversByWorkflowIDParams)
	// Add Workflow approvers.
	// (POST /workflows/{workflowID}/approvers)
	AddWorkflowApproversByWorkflowID(w http.ResponseWriter, r *http.Request, workflowID WorkflowIDPath, params AddWorkflowApproversByWorkflowIDParams)
	// Trigger transition for a Workflow
	// (POST /workflows/{workflowID}/state)
	TransitionWorkflow(w http.ResponseWriter, r *http.Request, workflowID WorkflowIDPath, params TransitionWorkflowParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetGroups operation middleware
func (siw *ServerInterfaceWrapper) GetGroups(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupsParams

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", r.URL.Query(), &params.Skip)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$skip", Err: err})
		return
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", r.URL.Query(), &params.Top)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$top", Err: err})
		return
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", r.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$count", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGroups(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateGroup operation middleware
func (siw *ServerInterfaceWrapper) CreateGroup(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateGroup(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteGroupByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteGroupByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "groupID" -------------
	var groupID GroupIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "groupID", r.PathValue("groupID"), &groupID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteGroupByID(w, r, groupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetGroupByID operation middleware
func (siw *ServerInterfaceWrapper) GetGroupByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "groupID" -------------
	var groupID GroupIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "groupID", r.PathValue("groupID"), &groupID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGroupByID(w, r, groupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateGroup operation middleware
func (siw *ServerInterfaceWrapper) UpdateGroup(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "groupID" -------------
	var groupID GroupIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "groupID", r.PathValue("groupID"), &groupID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateGroup(w, r, groupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteLabel operation middleware
func (siw *ServerInterfaceWrapper) DeleteLabel(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "keyID" -------------
	var keyID KeyIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "keyID", r.PathValue("keyID"), &keyID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "keyID", Err: err})
		return
	}

	// ------------- Path parameter "labelName" -------------
	var labelName string

	err = runtime.BindStyledParameterWithOptions("simple", "labelName", r.PathValue("labelName"), &labelName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "labelName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteLabel(w, r, keyID, labelName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetKeyLabels operation middleware
func (siw *ServerInterfaceWrapper) GetKeyLabels(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "keyID" -------------
	var keyID KeyIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "keyID", r.PathValue("keyID"), &keyID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "keyID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeyLabelsParams

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", r.URL.Query(), &params.Top)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$top", Err: err})
		return
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", r.URL.Query(), &params.Skip)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$skip", Err: err})
		return
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", r.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$count", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetKeyLabels(w, r, keyID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateOrUpdateLabels operation middleware
func (siw *ServerInterfaceWrapper) CreateOrUpdateLabels(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "keyID" -------------
	var keyID KeyIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "keyID", r.PathValue("keyID"), &keyID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "keyID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateOrUpdateLabels(w, r, keyID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetKeyConfigurations operation middleware
func (siw *ServerInterfaceWrapper) GetKeyConfigurations(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeyConfigurationsParams

	// ------------- Optional query parameter "expandGroup" -------------

	err = runtime.BindQueryParameter("form", true, false, "expandGroup", r.URL.Query(), &params.ExpandGroup)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expandGroup", Err: err})
		return
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", r.URL.Query(), &params.Skip)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$skip", Err: err})
		return
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", r.URL.Query(), &params.Top)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$top", Err: err})
		return
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", r.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$count", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetKeyConfigurations(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostKeyConfigurations operation middleware
func (siw *ServerInterfaceWrapper) PostKeyConfigurations(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostKeyConfigurations(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteKeyConfigurationByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteKeyConfigurationByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "keyConfigurationID" -------------
	var keyConfigurationID KeyConfigurationIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "keyConfigurationID", r.PathValue("keyConfigurationID"), &keyConfigurationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "keyConfigurationID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteKeyConfigurationByID(w, r, keyConfigurationID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetKeyConfigurationByID operation middleware
func (siw *ServerInterfaceWrapper) GetKeyConfigurationByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "keyConfigurationID" -------------
	var keyConfigurationID KeyConfigurationIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "keyConfigurationID", r.PathValue("keyConfigurationID"), &keyConfigurationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "keyConfigurationID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetKeyConfigurationByID(w, r, keyConfigurationID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateKeyConfigurationByID operation middleware
func (siw *ServerInterfaceWrapper) UpdateKeyConfigurationByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "keyConfigurationID" -------------
	var keyConfigurationID KeyConfigurationIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "keyConfigurationID", r.PathValue("keyConfigurationID"), &keyConfigurationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "keyConfigurationID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateKeyConfigurationByID(w, r, keyConfigurationID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetKeyConfigurationsCertificates operation middleware
func (siw *ServerInterfaceWrapper) GetKeyConfigurationsCertificates(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "keyConfigurationID" -------------
	var keyConfigurationID KeyConfigurationIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "keyConfigurationID", r.PathValue("keyConfigurationID"), &keyConfigurationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "keyConfigurationID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeyConfigurationsCertificatesParams

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", r.URL.Query(), &params.Skip)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$skip", Err: err})
		return
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", r.URL.Query(), &params.Top)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$top", Err: err})
		return
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", r.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$count", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetKeyConfigurationsCertificates(w, r, keyConfigurationID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTagsForKeyConfiguration operation middleware
func (siw *ServerInterfaceWrapper) GetTagsForKeyConfiguration(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "keyConfigurationID" -------------
	var keyConfigurationID KeyConfigurationIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "keyConfigurationID", r.PathValue("keyConfigurationID"), &keyConfigurationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "keyConfigurationID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagsForKeyConfigurationParams

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", r.URL.Query(), &params.Skip)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$skip", Err: err})
		return
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", r.URL.Query(), &params.Top)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$top", Err: err})
		return
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", r.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$count", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTagsForKeyConfiguration(w, r, keyConfigurationID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddTagsToKeyConfiguration operation middleware
func (siw *ServerInterfaceWrapper) AddTagsToKeyConfiguration(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "keyConfigurationID" -------------
	var keyConfigurationID KeyConfigurationIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "keyConfigurationID", r.PathValue("keyConfigurationID"), &keyConfigurationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "keyConfigurationID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddTagsToKeyConfiguration(w, r, keyConfigurationID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetKeys operation middleware
func (siw *ServerInterfaceWrapper) GetKeys(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeysParams

	// ------------- Optional query parameter "keyConfigurationID" -------------

	err = runtime.BindQueryParameter("form", true, false, "keyConfigurationID", r.URL.Query(), &params.KeyConfigurationID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "keyConfigurationID", Err: err})
		return
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", r.URL.Query(), &params.Skip)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$skip", Err: err})
		return
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", r.URL.Query(), &params.Top)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$top", Err: err})
		return
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", r.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$count", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetKeys(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostKeys operation middleware
func (siw *ServerInterfaceWrapper) PostKeys(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostKeys(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteKeysKeyID operation middleware
func (siw *ServerInterfaceWrapper) DeleteKeysKeyID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "keyID" -------------
	var keyID KeyIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "keyID", r.PathValue("keyID"), &keyID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "keyID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteKeysKeyID(w, r, keyID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetKeysKeyID operation middleware
func (siw *ServerInterfaceWrapper) GetKeysKeyID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "keyID" -------------
	var keyID KeyIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "keyID", r.PathValue("keyID"), &keyID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "keyID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetKeysKeyID(w, r, keyID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateKey operation middleware
func (siw *ServerInterfaceWrapper) UpdateKey(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "keyID" -------------
	var keyID KeyIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "keyID", r.PathValue("keyID"), &keyID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "keyID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateKey(w, r, keyID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ImportKeyMaterial operation middleware
func (siw *ServerInterfaceWrapper) ImportKeyMaterial(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "keyID" -------------
	var keyID KeyIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "keyID", r.PathValue("keyID"), &keyID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "keyID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ImportKeyMaterial(w, r, keyID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetKeyImportParams operation middleware
func (siw *ServerInterfaceWrapper) GetKeyImportParams(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "keyID" -------------
	var keyID KeyIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "keyID", r.PathValue("keyID"), &keyID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "keyID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetKeyImportParams(w, r, keyID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetKeyVersions operation middleware
func (siw *ServerInterfaceWrapper) GetKeyVersions(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "keyID" -------------
	var keyID KeyIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "keyID", r.PathValue("keyID"), &keyID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "keyID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeyVersionsParams

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", r.URL.Query(), &params.Skip)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$skip", Err: err})
		return
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", r.URL.Query(), &params.Top)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$top", Err: err})
		return
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", r.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$count", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetKeyVersions(w, r, keyID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateKeyVersion operation middleware
func (siw *ServerInterfaceWrapper) CreateKeyVersion(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "keyID" -------------
	var keyID KeyIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "keyID", r.PathValue("keyID"), &keyID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "keyID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateKeyVersion(w, r, keyID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetKeyVersionByNumber operation middleware
func (siw *ServerInterfaceWrapper) GetKeyVersionByNumber(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "keyID" -------------
	var keyID KeyIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "keyID", r.PathValue("keyID"), &keyID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "keyID", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version KeyVersionNumberPath

	err = runtime.BindStyledParameterWithOptions("simple", "version", r.PathValue("version"), &version, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetKeyVersionByNumber(w, r, keyID, version)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAllSystems operation middleware
func (siw *ServerInterfaceWrapper) GetAllSystems(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllSystemsParams

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", r.URL.Query(), &params.Skip)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$skip", Err: err})
		return
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", r.URL.Query(), &params.Top)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$top", Err: err})
		return
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", r.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$count", Err: err})
		return
	}

	// ------------- Optional query parameter "keyConfigurationID" -------------

	err = runtime.BindQueryParameter("form", true, false, "keyConfigurationID", r.URL.Query(), &params.KeyConfigurationID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "keyConfigurationID", Err: err})
		return
	}

	// ------------- Optional query parameter "Region" -------------

	err = runtime.BindQueryParameter("form", true, false, "Region", r.URL.Query(), &params.Region)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Region", Err: err})
		return
	}

	// ------------- Optional query parameter "Type" -------------

	err = runtime.BindQueryParameter("form", true, false, "Type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllSystems(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSystemByID operation middleware
func (siw *ServerInterfaceWrapper) GetSystemByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "systemID" -------------
	var systemID SystemIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "systemID", r.PathValue("systemID"), &systemID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "systemID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSystemByID(w, r, systemID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSystemLinkByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteSystemLinkByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "systemID" -------------
	var systemID SystemIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "systemID", r.PathValue("systemID"), &systemID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "systemID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSystemLinkByID(w, r, systemID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSystemLinkByID operation middleware
func (siw *ServerInterfaceWrapper) GetSystemLinkByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "systemID" -------------
	var systemID SystemIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "systemID", r.PathValue("systemID"), &systemID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "systemID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSystemLinkByID(w, r, systemID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchSystemLinkByID operation middleware
func (siw *ServerInterfaceWrapper) PatchSystemLinkByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "systemID" -------------
	var systemID SystemIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "systemID", r.PathValue("systemID"), &systemID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "systemID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchSystemLinkByID(w, r, systemID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTenants operation middleware
func (siw *ServerInterfaceWrapper) GetTenants(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTenantsParams

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", r.URL.Query(), &params.Skip)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$skip", Err: err})
		return
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", r.URL.Query(), &params.Top)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$top", Err: err})
		return
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", r.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$count", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTenants(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTenantsKeystores operation middleware
func (siw *ServerInterfaceWrapper) GetTenantsKeystores(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTenantsKeystores(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWorkflows operation middleware
func (siw *ServerInterfaceWrapper) GetWorkflows(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWorkflowsParams

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", r.URL.Query(), &params.Top)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$top", Err: err})
		return
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", r.URL.Query(), &params.Skip)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$skip", Err: err})
		return
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", r.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$count", Err: err})
		return
	}

	// ------------- Optional query parameter "UserID" -------------

	err = runtime.BindQueryParameter("form", true, false, "UserID", r.URL.Query(), &params.UserID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "UserID", Err: err})
		return
	}

	// ------------- Optional query parameter "ArtifactID" -------------

	err = runtime.BindQueryParameter("form", true, false, "ArtifactID", r.URL.Query(), &params.ArtifactID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ArtifactID", Err: err})
		return
	}

	// ------------- Optional query parameter "State" -------------

	err = runtime.BindQueryParameter("form", true, false, "State", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "State", Err: err})
		return
	}

	// ------------- Optional query parameter "ArtifactType" -------------

	err = runtime.BindQueryParameter("form", true, false, "ArtifactType", r.URL.Query(), &params.ArtifactType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ArtifactType", Err: err})
		return
	}

	// ------------- Optional query parameter "ActionType" -------------

	err = runtime.BindQueryParameter("form", true, false, "ActionType", r.URL.Query(), &params.ActionType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ActionType", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWorkflows(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateWorkflow operation middleware
func (siw *ServerInterfaceWrapper) CreateWorkflow(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateWorkflowParams

	headers := r.Header

	// ------------- Required header parameter "User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("User-ID")]; found {
		var UserID openapi_types.UUID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "User-ID", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "User-ID", valueList[0], &UserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "User-ID", Err: err})
			return
		}

		params.UserID = UserID

	} else {
		err := fmt.Errorf("Header parameter User-ID is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "User-ID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateWorkflow(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWorkflowByID operation middleware
func (siw *ServerInterfaceWrapper) GetWorkflowByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "workflowID" -------------
	var workflowID WorkflowIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "workflowID", r.PathValue("workflowID"), &workflowID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWorkflowByID(w, r, workflowID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListWorkflowApproversByWorkflowID operation middleware
func (siw *ServerInterfaceWrapper) ListWorkflowApproversByWorkflowID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "workflowID" -------------
	var workflowID WorkflowIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "workflowID", r.PathValue("workflowID"), &workflowID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWorkflowApproversByWorkflowIDParams

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", r.URL.Query(), &params.Top)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$top", Err: err})
		return
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", r.URL.Query(), &params.Skip)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$skip", Err: err})
		return
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", r.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "$count", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListWorkflowApproversByWorkflowID(w, r, workflowID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddWorkflowApproversByWorkflowID operation middleware
func (siw *ServerInterfaceWrapper) AddWorkflowApproversByWorkflowID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "workflowID" -------------
	var workflowID WorkflowIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "workflowID", r.PathValue("workflowID"), &workflowID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AddWorkflowApproversByWorkflowIDParams

	headers := r.Header

	// ------------- Required header parameter "User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("User-ID")]; found {
		var UserID openapi_types.UUID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "User-ID", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "User-ID", valueList[0], &UserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "User-ID", Err: err})
			return
		}

		params.UserID = UserID

	} else {
		err := fmt.Errorf("Header parameter User-ID is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "User-ID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddWorkflowApproversByWorkflowID(w, r, workflowID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TransitionWorkflow operation middleware
func (siw *ServerInterfaceWrapper) TransitionWorkflow(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "workflowID" -------------
	var workflowID WorkflowIDPath

	err = runtime.BindStyledParameterWithOptions("simple", "workflowID", r.PathValue("workflowID"), &workflowID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params TransitionWorkflowParams

	headers := r.Header

	// ------------- Required header parameter "User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("User-ID")]; found {
		var UserID openapi_types.UUID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "User-ID", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "User-ID", valueList[0], &UserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "User-ID", Err: err})
			return
		}

		params.UserID = UserID

	} else {
		err := fmt.Errorf("Header parameter User-ID is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "User-ID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TransitionWorkflow(w, r, workflowID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/groups", wrapper.GetGroups)
	m.HandleFunc("POST "+options.BaseURL+"/groups", wrapper.CreateGroup)
	m.HandleFunc("DELETE "+options.BaseURL+"/groups/{groupID}", wrapper.DeleteGroupByID)
	m.HandleFunc("GET "+options.BaseURL+"/groups/{groupID}", wrapper.GetGroupByID)
	m.HandleFunc("PATCH "+options.BaseURL+"/groups/{groupID}", wrapper.UpdateGroup)
	m.HandleFunc("DELETE "+options.BaseURL+"/key/{keyID}/label/{labelName}", wrapper.DeleteLabel)
	m.HandleFunc("GET "+options.BaseURL+"/key/{keyID}/labels", wrapper.GetKeyLabels)
	m.HandleFunc("POST "+options.BaseURL+"/key/{keyID}/labels", wrapper.CreateOrUpdateLabels)
	m.HandleFunc("GET "+options.BaseURL+"/keyConfigurations", wrapper.GetKeyConfigurations)
	m.HandleFunc("POST "+options.BaseURL+"/keyConfigurations", wrapper.PostKeyConfigurations)
	m.HandleFunc("DELETE "+options.BaseURL+"/keyConfigurations/{keyConfigurationID}", wrapper.DeleteKeyConfigurationByID)
	m.HandleFunc("GET "+options.BaseURL+"/keyConfigurations/{keyConfigurationID}", wrapper.GetKeyConfigurationByID)
	m.HandleFunc("PATCH "+options.BaseURL+"/keyConfigurations/{keyConfigurationID}", wrapper.UpdateKeyConfigurationByID)
	m.HandleFunc("GET "+options.BaseURL+"/keyConfigurations/{keyConfigurationID}/certificates", wrapper.GetKeyConfigurationsCertificates)
	m.HandleFunc("GET "+options.BaseURL+"/keyConfigurations/{keyConfigurationID}/tags", wrapper.GetTagsForKeyConfiguration)
	m.HandleFunc("PUT "+options.BaseURL+"/keyConfigurations/{keyConfigurationID}/tags", wrapper.AddTagsToKeyConfiguration)
	m.HandleFunc("GET "+options.BaseURL+"/keys", wrapper.GetKeys)
	m.HandleFunc("POST "+options.BaseURL+"/keys", wrapper.PostKeys)
	m.HandleFunc("DELETE "+options.BaseURL+"/keys/{keyID}", wrapper.DeleteKeysKeyID)
	m.HandleFunc("GET "+options.BaseURL+"/keys/{keyID}", wrapper.GetKeysKeyID)
	m.HandleFunc("PATCH "+options.BaseURL+"/keys/{keyID}", wrapper.UpdateKey)
	m.HandleFunc("POST "+options.BaseURL+"/keys/{keyID}/importKeyMaterial", wrapper.ImportKeyMaterial)
	m.HandleFunc("GET "+options.BaseURL+"/keys/{keyID}/importParams", wrapper.GetKeyImportParams)
	m.HandleFunc("GET "+options.BaseURL+"/keys/{keyID}/versions", wrapper.GetKeyVersions)
	m.HandleFunc("POST "+options.BaseURL+"/keys/{keyID}/versions", wrapper.CreateKeyVersion)
	m.HandleFunc("GET "+options.BaseURL+"/keys/{keyID}/versions/{version}", wrapper.GetKeyVersionByNumber)
	m.HandleFunc("GET "+options.BaseURL+"/systems", wrapper.GetAllSystems)
	m.HandleFunc("GET "+options.BaseURL+"/systems/{systemID}", wrapper.GetSystemByID)
	m.HandleFunc("DELETE "+options.BaseURL+"/systems/{systemID}/link", wrapper.DeleteSystemLinkByID)
	m.HandleFunc("GET "+options.BaseURL+"/systems/{systemID}/link", wrapper.GetSystemLinkByID)
	m.HandleFunc("PATCH "+options.BaseURL+"/systems/{systemID}/link", wrapper.PatchSystemLinkByID)
	m.HandleFunc("GET "+options.BaseURL+"/tenants", wrapper.GetTenants)
	m.HandleFunc("GET "+options.BaseURL+"/tenants/keystores", wrapper.GetTenantsKeystores)
	m.HandleFunc("GET "+options.BaseURL+"/workflows", wrapper.GetWorkflows)
	m.HandleFunc("POST "+options.BaseURL+"/workflows", wrapper.CreateWorkflow)
	m.HandleFunc("GET "+options.BaseURL+"/workflows/{workflowID}", wrapper.GetWorkflowByID)
	m.HandleFunc("GET "+options.BaseURL+"/workflows/{workflowID}/approvers", wrapper.ListWorkflowApproversByWorkflowID)
	m.HandleFunc("POST "+options.BaseURL+"/workflows/{workflowID}/approvers", wrapper.AddWorkflowApproversByWorkflowID)
	m.HandleFunc("POST "+options.BaseURL+"/workflows/{workflowID}/state", wrapper.TransitionWorkflow)

	return m
}

type N400JSONResponse ErrorMessage

type N401JSONResponse ErrorMessage

type N403JSONResponse ErrorMessage

type N404JSONResponse ErrorMessage

type N409JSONResponse ErrorMessage

type N429ResponseHeaders struct {
	RetryAfter int
}
type N429Response struct {
	Headers N429ResponseHeaders
}

type N500JSONResponse ErrorMessage

type GetGroupsRequestObject struct {
	Params GetGroupsParams
}

type GetGroupsResponseObject interface {
	VisitGetGroupsResponse(w http.ResponseWriter) error
}

type GetGroups200JSONResponse GroupList

func (response GetGroups200JSONResponse) VisitGetGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGroups400JSONResponse struct{ N400JSONResponse }

func (response GetGroups400JSONResponse) VisitGetGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetGroups401JSONResponse struct{ N401JSONResponse }

func (response GetGroups401JSONResponse) VisitGetGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetGroups403JSONResponse struct{ N403JSONResponse }

func (response GetGroups403JSONResponse) VisitGetGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetGroups429Response = N429Response

func (response GetGroups429Response) VisitGetGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type GetGroups500JSONResponse struct{ N500JSONResponse }

func (response GetGroups500JSONResponse) VisitGetGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateGroupRequestObject struct {
	Body *CreateGroupJSONRequestBody
}

type CreateGroupResponseObject interface {
	VisitCreateGroupResponse(w http.ResponseWriter) error
}

type CreateGroup201JSONResponse Group

func (response CreateGroup201JSONResponse) VisitCreateGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateGroup400JSONResponse struct{ N400JSONResponse }

func (response CreateGroup400JSONResponse) VisitCreateGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateGroup401JSONResponse struct{ N401JSONResponse }

func (response CreateGroup401JSONResponse) VisitCreateGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateGroup403JSONResponse struct{ N403JSONResponse }

func (response CreateGroup403JSONResponse) VisitCreateGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateGroup409JSONResponse struct{ N409JSONResponse }

func (response CreateGroup409JSONResponse) VisitCreateGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateGroup429Response = N429Response

func (response CreateGroup429Response) VisitCreateGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type CreateGroup500JSONResponse struct{ N500JSONResponse }

func (response CreateGroup500JSONResponse) VisitCreateGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupByIDRequestObject struct {
	GroupID GroupIDPath `json:"groupID"`
}

type DeleteGroupByIDResponseObject interface {
	VisitDeleteGroupByIDResponse(w http.ResponseWriter) error
}

type DeleteGroupByID204Response struct {
}

func (response DeleteGroupByID204Response) VisitDeleteGroupByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteGroupByID400JSONResponse struct{ N400JSONResponse }

func (response DeleteGroupByID400JSONResponse) VisitDeleteGroupByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupByID401JSONResponse struct{ N401JSONResponse }

func (response DeleteGroupByID401JSONResponse) VisitDeleteGroupByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupByID403JSONResponse struct{ N403JSONResponse }

func (response DeleteGroupByID403JSONResponse) VisitDeleteGroupByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupByID404JSONResponse struct{ N404JSONResponse }

func (response DeleteGroupByID404JSONResponse) VisitDeleteGroupByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupByID429Response = N429Response

func (response DeleteGroupByID429Response) VisitDeleteGroupByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type DeleteGroupByID500JSONResponse struct{ N500JSONResponse }

func (response DeleteGroupByID500JSONResponse) VisitDeleteGroupByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupByIDRequestObject struct {
	GroupID GroupIDPath `json:"groupID"`
}

type GetGroupByIDResponseObject interface {
	VisitGetGroupByIDResponse(w http.ResponseWriter) error
}

type GetGroupByID200JSONResponse Group

func (response GetGroupByID200JSONResponse) VisitGetGroupByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupByID400JSONResponse struct{ N400JSONResponse }

func (response GetGroupByID400JSONResponse) VisitGetGroupByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupByID401JSONResponse struct{ N401JSONResponse }

func (response GetGroupByID401JSONResponse) VisitGetGroupByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupByID403JSONResponse struct{ N403JSONResponse }

func (response GetGroupByID403JSONResponse) VisitGetGroupByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupByID429Response = N429Response

func (response GetGroupByID429Response) VisitGetGroupByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type GetGroupByID500JSONResponse struct{ N500JSONResponse }

func (response GetGroupByID500JSONResponse) VisitGetGroupByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGroupRequestObject struct {
	GroupID GroupIDPath `json:"groupID"`
	Body    *UpdateGroupApplicationMergePatchPlusJSONRequestBody
}

type UpdateGroupResponseObject interface {
	VisitUpdateGroupResponse(w http.ResponseWriter) error
}

type UpdateGroup200JSONResponse Group

func (response UpdateGroup200JSONResponse) VisitUpdateGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGroup400JSONResponse struct{ N400JSONResponse }

func (response UpdateGroup400JSONResponse) VisitUpdateGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGroup401JSONResponse struct{ N401JSONResponse }

func (response UpdateGroup401JSONResponse) VisitUpdateGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGroup403JSONResponse struct{ N403JSONResponse }

func (response UpdateGroup403JSONResponse) VisitUpdateGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGroup404JSONResponse struct{ N404JSONResponse }

func (response UpdateGroup404JSONResponse) VisitUpdateGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGroup409JSONResponse struct{ N409JSONResponse }

func (response UpdateGroup409JSONResponse) VisitUpdateGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGroup429Response = N429Response

func (response UpdateGroup429Response) VisitUpdateGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type UpdateGroup500JSONResponse struct{ N500JSONResponse }

func (response UpdateGroup500JSONResponse) VisitUpdateGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLabelRequestObject struct {
	KeyID     KeyIDPath `json:"keyID"`
	LabelName string    `json:"labelName"`
}

type DeleteLabelResponseObject interface {
	VisitDeleteLabelResponse(w http.ResponseWriter) error
}

type DeleteLabel204Response struct {
}

func (response DeleteLabel204Response) VisitDeleteLabelResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteLabel400JSONResponse struct{ N400JSONResponse }

func (response DeleteLabel400JSONResponse) VisitDeleteLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLabel401JSONResponse struct{ N401JSONResponse }

func (response DeleteLabel401JSONResponse) VisitDeleteLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLabel403JSONResponse struct{ N403JSONResponse }

func (response DeleteLabel403JSONResponse) VisitDeleteLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLabel404JSONResponse struct{ N404JSONResponse }

func (response DeleteLabel404JSONResponse) VisitDeleteLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLabel429Response = N429Response

func (response DeleteLabel429Response) VisitDeleteLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type DeleteLabel500JSONResponse struct{ N500JSONResponse }

func (response DeleteLabel500JSONResponse) VisitDeleteLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyLabelsRequestObject struct {
	KeyID  KeyIDPath `json:"keyID"`
	Params GetKeyLabelsParams
}

type GetKeyLabelsResponseObject interface {
	VisitGetKeyLabelsResponse(w http.ResponseWriter) error
}

type GetKeyLabels200JSONResponse LabelList

func (response GetKeyLabels200JSONResponse) VisitGetKeyLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyLabels400JSONResponse struct{ N400JSONResponse }

func (response GetKeyLabels400JSONResponse) VisitGetKeyLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyLabels401JSONResponse struct{ N401JSONResponse }

func (response GetKeyLabels401JSONResponse) VisitGetKeyLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyLabels403JSONResponse struct{ N403JSONResponse }

func (response GetKeyLabels403JSONResponse) VisitGetKeyLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyLabels404JSONResponse struct{ N404JSONResponse }

func (response GetKeyLabels404JSONResponse) VisitGetKeyLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyLabels429Response = N429Response

func (response GetKeyLabels429Response) VisitGetKeyLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type GetKeyLabels500JSONResponse struct{ N500JSONResponse }

func (response GetKeyLabels500JSONResponse) VisitGetKeyLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrUpdateLabelsRequestObject struct {
	KeyID KeyIDPath `json:"keyID"`
	Body  *CreateOrUpdateLabelsJSONRequestBody
}

type CreateOrUpdateLabelsResponseObject interface {
	VisitCreateOrUpdateLabelsResponse(w http.ResponseWriter) error
}

type CreateOrUpdateLabels204Response struct {
}

func (response CreateOrUpdateLabels204Response) VisitCreateOrUpdateLabelsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateOrUpdateLabels400JSONResponse struct{ N400JSONResponse }

func (response CreateOrUpdateLabels400JSONResponse) VisitCreateOrUpdateLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrUpdateLabels401JSONResponse struct{ N401JSONResponse }

func (response CreateOrUpdateLabels401JSONResponse) VisitCreateOrUpdateLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrUpdateLabels403JSONResponse struct{ N403JSONResponse }

func (response CreateOrUpdateLabels403JSONResponse) VisitCreateOrUpdateLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrUpdateLabels404JSONResponse struct{ N404JSONResponse }

func (response CreateOrUpdateLabels404JSONResponse) VisitCreateOrUpdateLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrUpdateLabels429Response = N429Response

func (response CreateOrUpdateLabels429Response) VisitCreateOrUpdateLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type CreateOrUpdateLabels500JSONResponse struct{ N500JSONResponse }

func (response CreateOrUpdateLabels500JSONResponse) VisitCreateOrUpdateLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyConfigurationsRequestObject struct {
	Params GetKeyConfigurationsParams
}

type GetKeyConfigurationsResponseObject interface {
	VisitGetKeyConfigurationsResponse(w http.ResponseWriter) error
}

type GetKeyConfigurations200JSONResponse KeyConfigurationList

func (response GetKeyConfigurations200JSONResponse) VisitGetKeyConfigurationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyConfigurations400JSONResponse struct{ N400JSONResponse }

func (response GetKeyConfigurations400JSONResponse) VisitGetKeyConfigurationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyConfigurations401JSONResponse struct{ N401JSONResponse }

func (response GetKeyConfigurations401JSONResponse) VisitGetKeyConfigurationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyConfigurations403JSONResponse struct{ N403JSONResponse }

func (response GetKeyConfigurations403JSONResponse) VisitGetKeyConfigurationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyConfigurations429Response = N429Response

func (response GetKeyConfigurations429Response) VisitGetKeyConfigurationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type GetKeyConfigurations500JSONResponse struct{ N500JSONResponse }

func (response GetKeyConfigurations500JSONResponse) VisitGetKeyConfigurationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostKeyConfigurationsRequestObject struct {
	Body *PostKeyConfigurationsJSONRequestBody
}

type PostKeyConfigurationsResponseObject interface {
	VisitPostKeyConfigurationsResponse(w http.ResponseWriter) error
}

type PostKeyConfigurations201JSONResponse KeyConfiguration

func (response PostKeyConfigurations201JSONResponse) VisitPostKeyConfigurationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostKeyConfigurations400JSONResponse struct{ N400JSONResponse }

func (response PostKeyConfigurations400JSONResponse) VisitPostKeyConfigurationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostKeyConfigurations401JSONResponse struct{ N401JSONResponse }

func (response PostKeyConfigurations401JSONResponse) VisitPostKeyConfigurationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostKeyConfigurations403JSONResponse struct{ N403JSONResponse }

func (response PostKeyConfigurations403JSONResponse) VisitPostKeyConfigurationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostKeyConfigurations409JSONResponse struct{ N409JSONResponse }

func (response PostKeyConfigurations409JSONResponse) VisitPostKeyConfigurationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostKeyConfigurations429Response = N429Response

func (response PostKeyConfigurations429Response) VisitPostKeyConfigurationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type PostKeyConfigurations500JSONResponse struct{ N500JSONResponse }

func (response PostKeyConfigurations500JSONResponse) VisitPostKeyConfigurationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteKeyConfigurationByIDRequestObject struct {
	KeyConfigurationID KeyConfigurationIDPath `json:"keyConfigurationID"`
}

type DeleteKeyConfigurationByIDResponseObject interface {
	VisitDeleteKeyConfigurationByIDResponse(w http.ResponseWriter) error
}

type DeleteKeyConfigurationByID204Response struct {
}

func (response DeleteKeyConfigurationByID204Response) VisitDeleteKeyConfigurationByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteKeyConfigurationByID400JSONResponse struct{ N400JSONResponse }

func (response DeleteKeyConfigurationByID400JSONResponse) VisitDeleteKeyConfigurationByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteKeyConfigurationByID401JSONResponse struct{ N401JSONResponse }

func (response DeleteKeyConfigurationByID401JSONResponse) VisitDeleteKeyConfigurationByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteKeyConfigurationByID403JSONResponse struct{ N403JSONResponse }

func (response DeleteKeyConfigurationByID403JSONResponse) VisitDeleteKeyConfigurationByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteKeyConfigurationByID404JSONResponse struct{ N404JSONResponse }

func (response DeleteKeyConfigurationByID404JSONResponse) VisitDeleteKeyConfigurationByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteKeyConfigurationByID429Response = N429Response

func (response DeleteKeyConfigurationByID429Response) VisitDeleteKeyConfigurationByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type DeleteKeyConfigurationByID500JSONResponse struct{ N500JSONResponse }

func (response DeleteKeyConfigurationByID500JSONResponse) VisitDeleteKeyConfigurationByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyConfigurationByIDRequestObject struct {
	KeyConfigurationID KeyConfigurationIDPath `json:"keyConfigurationID"`
}

type GetKeyConfigurationByIDResponseObject interface {
	VisitGetKeyConfigurationByIDResponse(w http.ResponseWriter) error
}

type GetKeyConfigurationByID200JSONResponse KeyConfiguration

func (response GetKeyConfigurationByID200JSONResponse) VisitGetKeyConfigurationByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyConfigurationByID400JSONResponse struct{ N400JSONResponse }

func (response GetKeyConfigurationByID400JSONResponse) VisitGetKeyConfigurationByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyConfigurationByID401JSONResponse struct{ N401JSONResponse }

func (response GetKeyConfigurationByID401JSONResponse) VisitGetKeyConfigurationByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyConfigurationByID403JSONResponse struct{ N403JSONResponse }

func (response GetKeyConfigurationByID403JSONResponse) VisitGetKeyConfigurationByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyConfigurationByID404JSONResponse struct{ N404JSONResponse }

func (response GetKeyConfigurationByID404JSONResponse) VisitGetKeyConfigurationByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyConfigurationByID429Response = N429Response

func (response GetKeyConfigurationByID429Response) VisitGetKeyConfigurationByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type GetKeyConfigurationByID500JSONResponse struct{ N500JSONResponse }

func (response GetKeyConfigurationByID500JSONResponse) VisitGetKeyConfigurationByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateKeyConfigurationByIDRequestObject struct {
	KeyConfigurationID KeyConfigurationIDPath `json:"keyConfigurationID"`
	Body               *UpdateKeyConfigurationByIDApplicationMergePatchPlusJSONRequestBody
}

type UpdateKeyConfigurationByIDResponseObject interface {
	VisitUpdateKeyConfigurationByIDResponse(w http.ResponseWriter) error
}

type UpdateKeyConfigurationByID200JSONResponse KeyConfiguration

func (response UpdateKeyConfigurationByID200JSONResponse) VisitUpdateKeyConfigurationByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateKeyConfigurationByID400JSONResponse struct{ N400JSONResponse }

func (response UpdateKeyConfigurationByID400JSONResponse) VisitUpdateKeyConfigurationByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateKeyConfigurationByID401JSONResponse struct{ N401JSONResponse }

func (response UpdateKeyConfigurationByID401JSONResponse) VisitUpdateKeyConfigurationByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateKeyConfigurationByID403JSONResponse struct{ N403JSONResponse }

func (response UpdateKeyConfigurationByID403JSONResponse) VisitUpdateKeyConfigurationByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateKeyConfigurationByID404JSONResponse struct{ N404JSONResponse }

func (response UpdateKeyConfigurationByID404JSONResponse) VisitUpdateKeyConfigurationByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateKeyConfigurationByID409JSONResponse struct{ N409JSONResponse }

func (response UpdateKeyConfigurationByID409JSONResponse) VisitUpdateKeyConfigurationByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type UpdateKeyConfigurationByID429Response = N429Response

func (response UpdateKeyConfigurationByID429Response) VisitUpdateKeyConfigurationByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type UpdateKeyConfigurationByID500JSONResponse struct{ N500JSONResponse }

func (response UpdateKeyConfigurationByID500JSONResponse) VisitUpdateKeyConfigurationByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyConfigurationsCertificatesRequestObject struct {
	KeyConfigurationID KeyConfigurationIDPath `json:"keyConfigurationID"`
	Params             GetKeyConfigurationsCertificatesParams
}

type GetKeyConfigurationsCertificatesResponseObject interface {
	VisitGetKeyConfigurationsCertificatesResponse(w http.ResponseWriter) error
}

type GetKeyConfigurationsCertificates200JSONResponse ClientCertificates

func (response GetKeyConfigurationsCertificates200JSONResponse) VisitGetKeyConfigurationsCertificatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyConfigurationsCertificates400JSONResponse struct{ N400JSONResponse }

func (response GetKeyConfigurationsCertificates400JSONResponse) VisitGetKeyConfigurationsCertificatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyConfigurationsCertificates401JSONResponse struct{ N401JSONResponse }

func (response GetKeyConfigurationsCertificates401JSONResponse) VisitGetKeyConfigurationsCertificatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyConfigurationsCertificates403JSONResponse struct{ N403JSONResponse }

func (response GetKeyConfigurationsCertificates403JSONResponse) VisitGetKeyConfigurationsCertificatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyConfigurationsCertificates429Response = N429Response

func (response GetKeyConfigurationsCertificates429Response) VisitGetKeyConfigurationsCertificatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type GetKeyConfigurationsCertificates500JSONResponse struct{ N500JSONResponse }

func (response GetKeyConfigurationsCertificates500JSONResponse) VisitGetKeyConfigurationsCertificatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTagsForKeyConfigurationRequestObject struct {
	KeyConfigurationID KeyConfigurationIDPath `json:"keyConfigurationID"`
	Params             GetTagsForKeyConfigurationParams
}

type GetTagsForKeyConfigurationResponseObject interface {
	VisitGetTagsForKeyConfigurationResponse(w http.ResponseWriter) error
}

type GetTagsForKeyConfiguration200JSONResponse TagList

func (response GetTagsForKeyConfiguration200JSONResponse) VisitGetTagsForKeyConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTagsForKeyConfiguration400JSONResponse struct{ N400JSONResponse }

func (response GetTagsForKeyConfiguration400JSONResponse) VisitGetTagsForKeyConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetTagsForKeyConfiguration401JSONResponse struct{ N401JSONResponse }

func (response GetTagsForKeyConfiguration401JSONResponse) VisitGetTagsForKeyConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetTagsForKeyConfiguration403JSONResponse struct{ N403JSONResponse }

func (response GetTagsForKeyConfiguration403JSONResponse) VisitGetTagsForKeyConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetTagsForKeyConfiguration404JSONResponse struct{ N404JSONResponse }

func (response GetTagsForKeyConfiguration404JSONResponse) VisitGetTagsForKeyConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetTagsForKeyConfiguration429Response = N429Response

func (response GetTagsForKeyConfiguration429Response) VisitGetTagsForKeyConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type GetTagsForKeyConfiguration500JSONResponse struct{ N500JSONResponse }

func (response GetTagsForKeyConfiguration500JSONResponse) VisitGetTagsForKeyConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AddTagsToKeyConfigurationRequestObject struct {
	KeyConfigurationID KeyConfigurationIDPath `json:"keyConfigurationID"`
	Body               *AddTagsToKeyConfigurationJSONRequestBody
}

type AddTagsToKeyConfigurationResponseObject interface {
	VisitAddTagsToKeyConfigurationResponse(w http.ResponseWriter) error
}

type AddTagsToKeyConfiguration204Response struct {
}

func (response AddTagsToKeyConfiguration204Response) VisitAddTagsToKeyConfigurationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type AddTagsToKeyConfiguration400JSONResponse struct{ N400JSONResponse }

func (response AddTagsToKeyConfiguration400JSONResponse) VisitAddTagsToKeyConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AddTagsToKeyConfiguration401JSONResponse struct{ N401JSONResponse }

func (response AddTagsToKeyConfiguration401JSONResponse) VisitAddTagsToKeyConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AddTagsToKeyConfiguration403JSONResponse struct{ N403JSONResponse }

func (response AddTagsToKeyConfiguration403JSONResponse) VisitAddTagsToKeyConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AddTagsToKeyConfiguration404JSONResponse struct{ N404JSONResponse }

func (response AddTagsToKeyConfiguration404JSONResponse) VisitAddTagsToKeyConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AddTagsToKeyConfiguration409JSONResponse struct{ N409JSONResponse }

func (response AddTagsToKeyConfiguration409JSONResponse) VisitAddTagsToKeyConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type AddTagsToKeyConfiguration429Response = N429Response

func (response AddTagsToKeyConfiguration429Response) VisitAddTagsToKeyConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type AddTagsToKeyConfiguration500JSONResponse struct{ N500JSONResponse }

func (response AddTagsToKeyConfiguration500JSONResponse) VisitAddTagsToKeyConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetKeysRequestObject struct {
	Params GetKeysParams
}

type GetKeysResponseObject interface {
	VisitGetKeysResponse(w http.ResponseWriter) error
}

type GetKeys200JSONResponse KeyList

func (response GetKeys200JSONResponse) VisitGetKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetKeys400JSONResponse struct{ N400JSONResponse }

func (response GetKeys400JSONResponse) VisitGetKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetKeys401JSONResponse struct{ N401JSONResponse }

func (response GetKeys401JSONResponse) VisitGetKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetKeys403JSONResponse struct{ N403JSONResponse }

func (response GetKeys403JSONResponse) VisitGetKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetKeys429Response = N429Response

func (response GetKeys429Response) VisitGetKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type GetKeys500JSONResponse struct{ N500JSONResponse }

func (response GetKeys500JSONResponse) VisitGetKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostKeysRequestObject struct {
	Body *PostKeysJSONRequestBody
}

type PostKeysResponseObject interface {
	VisitPostKeysResponse(w http.ResponseWriter) error
}

type PostKeys201JSONResponse Key

func (response PostKeys201JSONResponse) VisitPostKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostKeys400JSONResponse struct{ N400JSONResponse }

func (response PostKeys400JSONResponse) VisitPostKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostKeys401JSONResponse struct{ N401JSONResponse }

func (response PostKeys401JSONResponse) VisitPostKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostKeys403JSONResponse struct{ N403JSONResponse }

func (response PostKeys403JSONResponse) VisitPostKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostKeys409JSONResponse struct{ N409JSONResponse }

func (response PostKeys409JSONResponse) VisitPostKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostKeys429Response = N429Response

func (response PostKeys429Response) VisitPostKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type PostKeys500JSONResponse struct{ N500JSONResponse }

func (response PostKeys500JSONResponse) VisitPostKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteKeysKeyIDRequestObject struct {
	KeyID KeyIDPath `json:"keyID"`
}

type DeleteKeysKeyIDResponseObject interface {
	VisitDeleteKeysKeyIDResponse(w http.ResponseWriter) error
}

type DeleteKeysKeyID204Response struct {
}

func (response DeleteKeysKeyID204Response) VisitDeleteKeysKeyIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteKeysKeyID400JSONResponse struct{ N400JSONResponse }

func (response DeleteKeysKeyID400JSONResponse) VisitDeleteKeysKeyIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteKeysKeyID401JSONResponse struct{ N401JSONResponse }

func (response DeleteKeysKeyID401JSONResponse) VisitDeleteKeysKeyIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteKeysKeyID403JSONResponse struct{ N403JSONResponse }

func (response DeleteKeysKeyID403JSONResponse) VisitDeleteKeysKeyIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteKeysKeyID404JSONResponse struct{ N404JSONResponse }

func (response DeleteKeysKeyID404JSONResponse) VisitDeleteKeysKeyIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteKeysKeyID429Response = N429Response

func (response DeleteKeysKeyID429Response) VisitDeleteKeysKeyIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type DeleteKeysKeyID500JSONResponse struct{ N500JSONResponse }

func (response DeleteKeysKeyID500JSONResponse) VisitDeleteKeysKeyIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetKeysKeyIDRequestObject struct {
	KeyID KeyIDPath `json:"keyID"`
}

type GetKeysKeyIDResponseObject interface {
	VisitGetKeysKeyIDResponse(w http.ResponseWriter) error
}

type GetKeysKeyID200JSONResponse Key

func (response GetKeysKeyID200JSONResponse) VisitGetKeysKeyIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetKeysKeyID400JSONResponse struct{ N400JSONResponse }

func (response GetKeysKeyID400JSONResponse) VisitGetKeysKeyIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetKeysKeyID401JSONResponse struct{ N401JSONResponse }

func (response GetKeysKeyID401JSONResponse) VisitGetKeysKeyIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetKeysKeyID403JSONResponse struct{ N403JSONResponse }

func (response GetKeysKeyID403JSONResponse) VisitGetKeysKeyIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetKeysKeyID404JSONResponse struct{ N404JSONResponse }

func (response GetKeysKeyID404JSONResponse) VisitGetKeysKeyIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetKeysKeyID429Response = N429Response

func (response GetKeysKeyID429Response) VisitGetKeysKeyIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type GetKeysKeyID500JSONResponse struct{ N500JSONResponse }

func (response GetKeysKeyID500JSONResponse) VisitGetKeysKeyIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateKeyRequestObject struct {
	KeyID KeyIDPath `json:"keyID"`
	Body  *UpdateKeyApplicationMergePatchPlusJSONRequestBody
}

type UpdateKeyResponseObject interface {
	VisitUpdateKeyResponse(w http.ResponseWriter) error
}

type UpdateKey200JSONResponse Key

func (response UpdateKey200JSONResponse) VisitUpdateKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateKey400JSONResponse struct{ N400JSONResponse }

func (response UpdateKey400JSONResponse) VisitUpdateKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateKey401JSONResponse struct{ N401JSONResponse }

func (response UpdateKey401JSONResponse) VisitUpdateKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateKey403JSONResponse struct{ N403JSONResponse }

func (response UpdateKey403JSONResponse) VisitUpdateKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateKey404JSONResponse struct{ N404JSONResponse }

func (response UpdateKey404JSONResponse) VisitUpdateKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateKey409JSONResponse struct{ N409JSONResponse }

func (response UpdateKey409JSONResponse) VisitUpdateKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type UpdateKey429Response = N429Response

func (response UpdateKey429Response) VisitUpdateKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type UpdateKey500JSONResponse struct{ N500JSONResponse }

func (response UpdateKey500JSONResponse) VisitUpdateKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ImportKeyMaterialRequestObject struct {
	KeyID KeyIDPath `json:"keyID"`
	Body  *ImportKeyMaterialJSONRequestBody
}

type ImportKeyMaterialResponseObject interface {
	VisitImportKeyMaterialResponse(w http.ResponseWriter) error
}

type ImportKeyMaterial201JSONResponse Key

func (response ImportKeyMaterial201JSONResponse) VisitImportKeyMaterialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ImportKeyMaterial400JSONResponse struct{ N400JSONResponse }

func (response ImportKeyMaterial400JSONResponse) VisitImportKeyMaterialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ImportKeyMaterial401JSONResponse struct{ N401JSONResponse }

func (response ImportKeyMaterial401JSONResponse) VisitImportKeyMaterialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ImportKeyMaterial403JSONResponse struct{ N403JSONResponse }

func (response ImportKeyMaterial403JSONResponse) VisitImportKeyMaterialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ImportKeyMaterial404JSONResponse struct{ N404JSONResponse }

func (response ImportKeyMaterial404JSONResponse) VisitImportKeyMaterialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ImportKeyMaterial429Response = N429Response

func (response ImportKeyMaterial429Response) VisitImportKeyMaterialResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type ImportKeyMaterial500JSONResponse struct{ N500JSONResponse }

func (response ImportKeyMaterial500JSONResponse) VisitImportKeyMaterialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyImportParamsRequestObject struct {
	KeyID KeyIDPath `json:"keyID"`
}

type GetKeyImportParamsResponseObject interface {
	VisitGetKeyImportParamsResponse(w http.ResponseWriter) error
}

type GetKeyImportParams200JSONResponse ImportParams

func (response GetKeyImportParams200JSONResponse) VisitGetKeyImportParamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyImportParams400JSONResponse struct{ N400JSONResponse }

func (response GetKeyImportParams400JSONResponse) VisitGetKeyImportParamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyImportParams401JSONResponse struct{ N401JSONResponse }

func (response GetKeyImportParams401JSONResponse) VisitGetKeyImportParamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyImportParams403JSONResponse struct{ N403JSONResponse }

func (response GetKeyImportParams403JSONResponse) VisitGetKeyImportParamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyImportParams404JSONResponse struct{ N404JSONResponse }

func (response GetKeyImportParams404JSONResponse) VisitGetKeyImportParamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyImportParams429Response = N429Response

func (response GetKeyImportParams429Response) VisitGetKeyImportParamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type GetKeyImportParams500JSONResponse struct{ N500JSONResponse }

func (response GetKeyImportParams500JSONResponse) VisitGetKeyImportParamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyVersionsRequestObject struct {
	KeyID  KeyIDPath `json:"keyID"`
	Params GetKeyVersionsParams
}

type GetKeyVersionsResponseObject interface {
	VisitGetKeyVersionsResponse(w http.ResponseWriter) error
}

type GetKeyVersions200JSONResponse KeyVersionList

func (response GetKeyVersions200JSONResponse) VisitGetKeyVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyVersions400JSONResponse struct{ N400JSONResponse }

func (response GetKeyVersions400JSONResponse) VisitGetKeyVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyVersions401JSONResponse struct{ N401JSONResponse }

func (response GetKeyVersions401JSONResponse) VisitGetKeyVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyVersions403JSONResponse struct{ N403JSONResponse }

func (response GetKeyVersions403JSONResponse) VisitGetKeyVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyVersions404JSONResponse struct{ N404JSONResponse }

func (response GetKeyVersions404JSONResponse) VisitGetKeyVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyVersions429Response = N429Response

func (response GetKeyVersions429Response) VisitGetKeyVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type GetKeyVersions500JSONResponse struct{ N500JSONResponse }

func (response GetKeyVersions500JSONResponse) VisitGetKeyVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateKeyVersionRequestObject struct {
	KeyID KeyIDPath `json:"keyID"`
	Body  *CreateKeyVersionJSONRequestBody
}

type CreateKeyVersionResponseObject interface {
	VisitCreateKeyVersionResponse(w http.ResponseWriter) error
}

type CreateKeyVersion201JSONResponse KeyVersion

func (response CreateKeyVersion201JSONResponse) VisitCreateKeyVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateKeyVersion400JSONResponse struct{ N400JSONResponse }

func (response CreateKeyVersion400JSONResponse) VisitCreateKeyVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateKeyVersion401JSONResponse struct{ N401JSONResponse }

func (response CreateKeyVersion401JSONResponse) VisitCreateKeyVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateKeyVersion403JSONResponse struct{ N403JSONResponse }

func (response CreateKeyVersion403JSONResponse) VisitCreateKeyVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateKeyVersion404JSONResponse struct{ N404JSONResponse }

func (response CreateKeyVersion404JSONResponse) VisitCreateKeyVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateKeyVersion429Response = N429Response

func (response CreateKeyVersion429Response) VisitCreateKeyVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type CreateKeyVersion500JSONResponse struct{ N500JSONResponse }

func (response CreateKeyVersion500JSONResponse) VisitCreateKeyVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyVersionByNumberRequestObject struct {
	KeyID   KeyIDPath            `json:"keyID"`
	Version KeyVersionNumberPath `json:"version"`
}

type GetKeyVersionByNumberResponseObject interface {
	VisitGetKeyVersionByNumberResponse(w http.ResponseWriter) error
}

type GetKeyVersionByNumber200JSONResponse KeyVersion

func (response GetKeyVersionByNumber200JSONResponse) VisitGetKeyVersionByNumberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyVersionByNumber400JSONResponse struct{ N400JSONResponse }

func (response GetKeyVersionByNumber400JSONResponse) VisitGetKeyVersionByNumberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyVersionByNumber401JSONResponse struct{ N401JSONResponse }

func (response GetKeyVersionByNumber401JSONResponse) VisitGetKeyVersionByNumberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyVersionByNumber403JSONResponse struct{ N403JSONResponse }

func (response GetKeyVersionByNumber403JSONResponse) VisitGetKeyVersionByNumberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyVersionByNumber404JSONResponse struct{ N404JSONResponse }

func (response GetKeyVersionByNumber404JSONResponse) VisitGetKeyVersionByNumberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyVersionByNumber429Response = N429Response

func (response GetKeyVersionByNumber429Response) VisitGetKeyVersionByNumberResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type GetKeyVersionByNumber500JSONResponse struct{ N500JSONResponse }

func (response GetKeyVersionByNumber500JSONResponse) VisitGetKeyVersionByNumberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllSystemsRequestObject struct {
	Params GetAllSystemsParams
}

type GetAllSystemsResponseObject interface {
	VisitGetAllSystemsResponse(w http.ResponseWriter) error
}

type GetAllSystems200JSONResponse SystemList

func (response GetAllSystems200JSONResponse) VisitGetAllSystemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllSystems400JSONResponse struct{ N400JSONResponse }

func (response GetAllSystems400JSONResponse) VisitGetAllSystemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllSystems401JSONResponse struct{ N401JSONResponse }

func (response GetAllSystems401JSONResponse) VisitGetAllSystemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAllSystems403JSONResponse struct{ N403JSONResponse }

func (response GetAllSystems403JSONResponse) VisitGetAllSystemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAllSystems429Response = N429Response

func (response GetAllSystems429Response) VisitGetAllSystemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type GetAllSystems500JSONResponse struct{ N500JSONResponse }

func (response GetAllSystems500JSONResponse) VisitGetAllSystemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSystemByIDRequestObject struct {
	SystemID SystemIDPath `json:"systemID"`
}

type GetSystemByIDResponseObject interface {
	VisitGetSystemByIDResponse(w http.ResponseWriter) error
}

type GetSystemByID200JSONResponse System

func (response GetSystemByID200JSONResponse) VisitGetSystemByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSystemByID400JSONResponse struct{ N400JSONResponse }

func (response GetSystemByID400JSONResponse) VisitGetSystemByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSystemByID401JSONResponse struct{ N401JSONResponse }

func (response GetSystemByID401JSONResponse) VisitGetSystemByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetSystemByID403JSONResponse struct{ N403JSONResponse }

func (response GetSystemByID403JSONResponse) VisitGetSystemByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetSystemByID404JSONResponse struct{ N404JSONResponse }

func (response GetSystemByID404JSONResponse) VisitGetSystemByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSystemByID429Response = N429Response

func (response GetSystemByID429Response) VisitGetSystemByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type GetSystemByID500JSONResponse struct{ N500JSONResponse }

func (response GetSystemByID500JSONResponse) VisitGetSystemByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSystemLinkByIDRequestObject struct {
	SystemID SystemIDPath `json:"systemID"`
}

type DeleteSystemLinkByIDResponseObject interface {
	VisitDeleteSystemLinkByIDResponse(w http.ResponseWriter) error
}

type DeleteSystemLinkByID204Response struct {
}

func (response DeleteSystemLinkByID204Response) VisitDeleteSystemLinkByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteSystemLinkByID400JSONResponse struct{ N400JSONResponse }

func (response DeleteSystemLinkByID400JSONResponse) VisitDeleteSystemLinkByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSystemLinkByID401JSONResponse struct{ N401JSONResponse }

func (response DeleteSystemLinkByID401JSONResponse) VisitDeleteSystemLinkByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSystemLinkByID403JSONResponse struct{ N403JSONResponse }

func (response DeleteSystemLinkByID403JSONResponse) VisitDeleteSystemLinkByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSystemLinkByID404JSONResponse struct{ N404JSONResponse }

func (response DeleteSystemLinkByID404JSONResponse) VisitDeleteSystemLinkByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSystemLinkByID429Response = N429Response

func (response DeleteSystemLinkByID429Response) VisitDeleteSystemLinkByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type DeleteSystemLinkByID500JSONResponse struct{ N500JSONResponse }

func (response DeleteSystemLinkByID500JSONResponse) VisitDeleteSystemLinkByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSystemLinkByIDRequestObject struct {
	SystemID SystemIDPath `json:"systemID"`
}

type GetSystemLinkByIDResponseObject interface {
	VisitGetSystemLinkByIDResponse(w http.ResponseWriter) error
}

type GetSystemLinkByID200JSONResponse SystemLink

func (response GetSystemLinkByID200JSONResponse) VisitGetSystemLinkByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSystemLinkByID400JSONResponse struct{ N400JSONResponse }

func (response GetSystemLinkByID400JSONResponse) VisitGetSystemLinkByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSystemLinkByID401JSONResponse struct{ N401JSONResponse }

func (response GetSystemLinkByID401JSONResponse) VisitGetSystemLinkByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetSystemLinkByID403JSONResponse struct{ N403JSONResponse }

func (response GetSystemLinkByID403JSONResponse) VisitGetSystemLinkByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetSystemLinkByID404JSONResponse struct{ N404JSONResponse }

func (response GetSystemLinkByID404JSONResponse) VisitGetSystemLinkByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSystemLinkByID429Response = N429Response

func (response GetSystemLinkByID429Response) VisitGetSystemLinkByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type GetSystemLinkByID500JSONResponse struct{ N500JSONResponse }

func (response GetSystemLinkByID500JSONResponse) VisitGetSystemLinkByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchSystemLinkByIDRequestObject struct {
	SystemID SystemIDPath `json:"systemID"`
	Body     *PatchSystemLinkByIDApplicationMergePatchPlusJSONRequestBody
}

type PatchSystemLinkByIDResponseObject interface {
	VisitPatchSystemLinkByIDResponse(w http.ResponseWriter) error
}

type PatchSystemLinkByID200JSONResponse System

func (response PatchSystemLinkByID200JSONResponse) VisitPatchSystemLinkByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchSystemLinkByID400JSONResponse struct{ N400JSONResponse }

func (response PatchSystemLinkByID400JSONResponse) VisitPatchSystemLinkByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchSystemLinkByID401JSONResponse struct{ N401JSONResponse }

func (response PatchSystemLinkByID401JSONResponse) VisitPatchSystemLinkByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchSystemLinkByID403JSONResponse struct{ N403JSONResponse }

func (response PatchSystemLinkByID403JSONResponse) VisitPatchSystemLinkByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchSystemLinkByID409JSONResponse struct{ N409JSONResponse }

func (response PatchSystemLinkByID409JSONResponse) VisitPatchSystemLinkByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PatchSystemLinkByID429Response = N429Response

func (response PatchSystemLinkByID429Response) VisitPatchSystemLinkByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type PatchSystemLinkByID500JSONResponse struct{ N500JSONResponse }

func (response PatchSystemLinkByID500JSONResponse) VisitPatchSystemLinkByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTenantsRequestObject struct {
	Params GetTenantsParams
}

type GetTenantsResponseObject interface {
	VisitGetTenantsResponse(w http.ResponseWriter) error
}

type GetTenants200JSONResponse TenantList

func (response GetTenants200JSONResponse) VisitGetTenantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTenants400JSONResponse struct{ N400JSONResponse }

func (response GetTenants400JSONResponse) VisitGetTenantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetTenants401JSONResponse struct{ N401JSONResponse }

func (response GetTenants401JSONResponse) VisitGetTenantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetTenants403JSONResponse struct{ N403JSONResponse }

func (response GetTenants403JSONResponse) VisitGetTenantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetTenants429Response = N429Response

func (response GetTenants429Response) VisitGetTenantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type GetTenants500JSONResponse struct{ N500JSONResponse }

func (response GetTenants500JSONResponse) VisitGetTenantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTenantsKeystoresRequestObject struct {
}

type GetTenantsKeystoresResponseObject interface {
	VisitGetTenantsKeystoresResponse(w http.ResponseWriter) error
}

type GetTenantsKeystores200JSONResponse TenantKeystore

func (response GetTenantsKeystores200JSONResponse) VisitGetTenantsKeystoresResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTenantsKeystores400JSONResponse struct{ N400JSONResponse }

func (response GetTenantsKeystores400JSONResponse) VisitGetTenantsKeystoresResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetTenantsKeystores401JSONResponse struct{ N401JSONResponse }

func (response GetTenantsKeystores401JSONResponse) VisitGetTenantsKeystoresResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetTenantsKeystores403JSONResponse struct{ N403JSONResponse }

func (response GetTenantsKeystores403JSONResponse) VisitGetTenantsKeystoresResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetTenantsKeystores429Response = N429Response

func (response GetTenantsKeystores429Response) VisitGetTenantsKeystoresResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type GetTenantsKeystores500JSONResponse struct{ N500JSONResponse }

func (response GetTenantsKeystores500JSONResponse) VisitGetTenantsKeystoresResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowsRequestObject struct {
	Params GetWorkflowsParams
}

type GetWorkflowsResponseObject interface {
	VisitGetWorkflowsResponse(w http.ResponseWriter) error
}

type GetWorkflows200JSONResponse WorkflowList

func (response GetWorkflows200JSONResponse) VisitGetWorkflowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflows400JSONResponse struct{ N400JSONResponse }

func (response GetWorkflows400JSONResponse) VisitGetWorkflowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflows401JSONResponse struct{ N401JSONResponse }

func (response GetWorkflows401JSONResponse) VisitGetWorkflowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflows403JSONResponse struct{ N403JSONResponse }

func (response GetWorkflows403JSONResponse) VisitGetWorkflowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflows429Response = N429Response

func (response GetWorkflows429Response) VisitGetWorkflowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type GetWorkflows500JSONResponse struct{ N500JSONResponse }

func (response GetWorkflows500JSONResponse) VisitGetWorkflowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkflowRequestObject struct {
	Params CreateWorkflowParams
	Body   *CreateWorkflowJSONRequestBody
}

type CreateWorkflowResponseObject interface {
	VisitCreateWorkflowResponse(w http.ResponseWriter) error
}

type CreateWorkflow201JSONResponse Workflow

func (response CreateWorkflow201JSONResponse) VisitCreateWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkflow400JSONResponse struct{ N400JSONResponse }

func (response CreateWorkflow400JSONResponse) VisitCreateWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkflow401JSONResponse struct{ N401JSONResponse }

func (response CreateWorkflow401JSONResponse) VisitCreateWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkflow403JSONResponse struct{ N403JSONResponse }

func (response CreateWorkflow403JSONResponse) VisitCreateWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkflow404JSONResponse struct{ N404JSONResponse }

func (response CreateWorkflow404JSONResponse) VisitCreateWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkflow409JSONResponse struct{ N409JSONResponse }

func (response CreateWorkflow409JSONResponse) VisitCreateWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkflow429Response = N429Response

func (response CreateWorkflow429Response) VisitCreateWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type CreateWorkflow500JSONResponse struct{ N500JSONResponse }

func (response CreateWorkflow500JSONResponse) VisitCreateWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowByIDRequestObject struct {
	WorkflowID WorkflowIDPath `json:"workflowID"`
}

type GetWorkflowByIDResponseObject interface {
	VisitGetWorkflowByIDResponse(w http.ResponseWriter) error
}

type GetWorkflowByID201JSONResponse Workflow

func (response GetWorkflowByID201JSONResponse) VisitGetWorkflowByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowByID400JSONResponse struct{ N400JSONResponse }

func (response GetWorkflowByID400JSONResponse) VisitGetWorkflowByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowByID401JSONResponse struct{ N401JSONResponse }

func (response GetWorkflowByID401JSONResponse) VisitGetWorkflowByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowByID403JSONResponse struct{ N403JSONResponse }

func (response GetWorkflowByID403JSONResponse) VisitGetWorkflowByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowByID404JSONResponse struct{ N404JSONResponse }

func (response GetWorkflowByID404JSONResponse) VisitGetWorkflowByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowByID429Response = N429Response

func (response GetWorkflowByID429Response) VisitGetWorkflowByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type GetWorkflowByID500JSONResponse struct{ N500JSONResponse }

func (response GetWorkflowByID500JSONResponse) VisitGetWorkflowByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkflowApproversByWorkflowIDRequestObject struct {
	WorkflowID WorkflowIDPath `json:"workflowID"`
	Params     ListWorkflowApproversByWorkflowIDParams
}

type ListWorkflowApproversByWorkflowIDResponseObject interface {
	VisitListWorkflowApproversByWorkflowIDResponse(w http.ResponseWriter) error
}

type ListWorkflowApproversByWorkflowID200JSONResponse WorkflowApproverList

func (response ListWorkflowApproversByWorkflowID200JSONResponse) VisitListWorkflowApproversByWorkflowIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkflowApproversByWorkflowID400JSONResponse struct{ N400JSONResponse }

func (response ListWorkflowApproversByWorkflowID400JSONResponse) VisitListWorkflowApproversByWorkflowIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkflowApproversByWorkflowID401JSONResponse struct{ N401JSONResponse }

func (response ListWorkflowApproversByWorkflowID401JSONResponse) VisitListWorkflowApproversByWorkflowIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkflowApproversByWorkflowID403JSONResponse struct{ N403JSONResponse }

func (response ListWorkflowApproversByWorkflowID403JSONResponse) VisitListWorkflowApproversByWorkflowIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkflowApproversByWorkflowID404JSONResponse struct{ N404JSONResponse }

func (response ListWorkflowApproversByWorkflowID404JSONResponse) VisitListWorkflowApproversByWorkflowIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkflowApproversByWorkflowID429Response = N429Response

func (response ListWorkflowApproversByWorkflowID429Response) VisitListWorkflowApproversByWorkflowIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type ListWorkflowApproversByWorkflowID500JSONResponse struct{ N500JSONResponse }

func (response ListWorkflowApproversByWorkflowID500JSONResponse) VisitListWorkflowApproversByWorkflowIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AddWorkflowApproversByWorkflowIDRequestObject struct {
	WorkflowID WorkflowIDPath `json:"workflowID"`
	Params     AddWorkflowApproversByWorkflowIDParams
	Body       *AddWorkflowApproversByWorkflowIDJSONRequestBody
}

type AddWorkflowApproversByWorkflowIDResponseObject interface {
	VisitAddWorkflowApproversByWorkflowIDResponse(w http.ResponseWriter) error
}

type AddWorkflowApproversByWorkflowID204JSONResponse Workflow

func (response AddWorkflowApproversByWorkflowID204JSONResponse) VisitAddWorkflowApproversByWorkflowIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(204)

	return json.NewEncoder(w).Encode(response)
}

type AddWorkflowApproversByWorkflowID400JSONResponse struct{ N400JSONResponse }

func (response AddWorkflowApproversByWorkflowID400JSONResponse) VisitAddWorkflowApproversByWorkflowIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AddWorkflowApproversByWorkflowID401JSONResponse struct{ N401JSONResponse }

func (response AddWorkflowApproversByWorkflowID401JSONResponse) VisitAddWorkflowApproversByWorkflowIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AddWorkflowApproversByWorkflowID403JSONResponse struct{ N403JSONResponse }

func (response AddWorkflowApproversByWorkflowID403JSONResponse) VisitAddWorkflowApproversByWorkflowIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AddWorkflowApproversByWorkflowID404JSONResponse struct{ N404JSONResponse }

func (response AddWorkflowApproversByWorkflowID404JSONResponse) VisitAddWorkflowApproversByWorkflowIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AddWorkflowApproversByWorkflowID429Response = N429Response

func (response AddWorkflowApproversByWorkflowID429Response) VisitAddWorkflowApproversByWorkflowIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type AddWorkflowApproversByWorkflowID500JSONResponse struct{ N500JSONResponse }

func (response AddWorkflowApproversByWorkflowID500JSONResponse) VisitAddWorkflowApproversByWorkflowIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type TransitionWorkflowRequestObject struct {
	WorkflowID WorkflowIDPath `json:"workflowID"`
	Params     TransitionWorkflowParams
	Body       *TransitionWorkflowJSONRequestBody
}

type TransitionWorkflowResponseObject interface {
	VisitTransitionWorkflowResponse(w http.ResponseWriter) error
}

type TransitionWorkflow200JSONResponse Workflow

func (response TransitionWorkflow200JSONResponse) VisitTransitionWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TransitionWorkflow400JSONResponse struct{ N400JSONResponse }

func (response TransitionWorkflow400JSONResponse) VisitTransitionWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TransitionWorkflow401JSONResponse struct{ N401JSONResponse }

func (response TransitionWorkflow401JSONResponse) VisitTransitionWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type TransitionWorkflow403JSONResponse struct{ N403JSONResponse }

func (response TransitionWorkflow403JSONResponse) VisitTransitionWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TransitionWorkflow404JSONResponse struct{ N404JSONResponse }

func (response TransitionWorkflow404JSONResponse) VisitTransitionWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type TransitionWorkflow429Response = N429Response

func (response TransitionWorkflow429Response) VisitTransitionWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)
	return nil
}

type TransitionWorkflow500JSONResponse struct{ N500JSONResponse }

func (response TransitionWorkflow500JSONResponse) VisitTransitionWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get Groups
	// (GET /groups)
	GetGroups(ctx context.Context, request GetGroupsRequestObject) (GetGroupsResponseObject, error)
	// Create a new Group
	// (POST /groups)
	CreateGroup(ctx context.Context, request CreateGroupRequestObject) (CreateGroupResponseObject, error)
	// Delete a Group by its ID
	// (DELETE /groups/{groupID})
	DeleteGroupByID(ctx context.Context, request DeleteGroupByIDRequestObject) (DeleteGroupByIDResponseObject, error)
	// Get Group by ID
	// (GET /groups/{groupID})
	GetGroupByID(ctx context.Context, request GetGroupByIDRequestObject) (GetGroupByIDResponseObject, error)
	// Update group
	// (PATCH /groups/{groupID})
	UpdateGroup(ctx context.Context, request UpdateGroupRequestObject) (UpdateGroupResponseObject, error)
	// Delete a specified Label from a Key
	// (DELETE /key/{keyID}/label/{labelName})
	DeleteLabel(ctx context.Context, request DeleteLabelRequestObject) (DeleteLabelResponseObject, error)
	// Get the Labels associated with the Key
	// (GET /key/{keyID}/labels)
	GetKeyLabels(ctx context.Context, request GetKeyLabelsRequestObject) (GetKeyLabelsResponseObject, error)
	// Create and update Labels
	// (POST /key/{keyID}/labels)
	CreateOrUpdateLabels(ctx context.Context, request CreateOrUpdateLabelsRequestObject) (CreateOrUpdateLabelsResponseObject, error)
	// Get all Key Configurations
	// (GET /keyConfigurations)
	GetKeyConfigurations(ctx context.Context, request GetKeyConfigurationsRequestObject) (GetKeyConfigurationsResponseObject, error)
	// Create a new Key Configuration
	// (POST /keyConfigurations)
	PostKeyConfigurations(ctx context.Context, request PostKeyConfigurationsRequestObject) (PostKeyConfigurationsResponseObject, error)
	// Delete an Key Configuration by its ID
	// (DELETE /keyConfigurations/{keyConfigurationID})
	DeleteKeyConfigurationByID(ctx context.Context, request DeleteKeyConfigurationByIDRequestObject) (DeleteKeyConfigurationByIDResponseObject, error)
	// Get Key Configuration metadata by ID
	// (GET /keyConfigurations/{keyConfigurationID})
	GetKeyConfigurationByID(ctx context.Context, request GetKeyConfigurationByIDRequestObject) (GetKeyConfigurationByIDResponseObject, error)
	// Update Key Configuration metadata by ID
	// (PATCH /keyConfigurations/{keyConfigurationID})
	UpdateKeyConfigurationByID(ctx context.Context, request UpdateKeyConfigurationByIDRequestObject) (UpdateKeyConfigurationByIDResponseObject, error)
	// Get the client certificate details
	// (GET /keyConfigurations/{keyConfigurationID}/certificates)
	GetKeyConfigurationsCertificates(ctx context.Context, request GetKeyConfigurationsCertificatesRequestObject) (GetKeyConfigurationsCertificatesResponseObject, error)
	// Get list of Tags for a Key Configuration
	// (GET /keyConfigurations/{keyConfigurationID}/tags)
	GetTagsForKeyConfiguration(ctx context.Context, request GetTagsForKeyConfigurationRequestObject) (GetTagsForKeyConfigurationResponseObject, error)
	// Either set new Tags or replace Tags for a Key Configuration
	// (PUT /keyConfigurations/{keyConfigurationID}/tags)
	AddTagsToKeyConfiguration(ctx context.Context, request AddTagsToKeyConfigurationRequestObject) (AddTagsToKeyConfigurationResponseObject, error)
	// Get metadata of Keys
	// (GET /keys)
	GetKeys(ctx context.Context, request GetKeysRequestObject) (GetKeysResponseObject, error)
	// Create a new Key
	// (POST /keys)
	PostKeys(ctx context.Context, request PostKeysRequestObject) (PostKeysResponseObject, error)
	// Delete an Key by its ID
	// (DELETE /keys/{keyID})
	DeleteKeysKeyID(ctx context.Context, request DeleteKeysKeyIDRequestObject) (DeleteKeysKeyIDResponseObject, error)
	// Get Key metadata by ID
	// (GET /keys/{keyID})
	GetKeysKeyID(ctx context.Context, request GetKeysKeyIDRequestObject) (GetKeysKeyIDResponseObject, error)
	// Update Key metadata by ID
	// (PATCH /keys/{keyID})
	UpdateKey(ctx context.Context, request UpdateKeyRequestObject) (UpdateKeyResponseObject, error)
	// Import a key material
	// (POST /keys/{keyID}/importKeyMaterial)
	ImportKeyMaterial(ctx context.Context, request ImportKeyMaterialRequestObject) (ImportKeyMaterialResponseObject, error)
	// Get import parameters for a Bring Your Own Key (BYOK) key
	// (GET /keys/{keyID}/importParams)
	GetKeyImportParams(ctx context.Context, request GetKeyImportParamsRequestObject) (GetKeyImportParamsResponseObject, error)
	// Get metadata of all Key Versions by Key ID
	// (GET /keys/{keyID}/versions)
	GetKeyVersions(ctx context.Context, request GetKeyVersionsRequestObject) (GetKeyVersionsResponseObject, error)
	// Create a new Key Version
	// (POST /keys/{keyID}/versions)
	CreateKeyVersion(ctx context.Context, request CreateKeyVersionRequestObject) (CreateKeyVersionResponseObject, error)
	// Get metadata of a key Version by key ID and Version number
	// (GET /keys/{keyID}/versions/{version})
	GetKeyVersionByNumber(ctx context.Context, request GetKeyVersionByNumberRequestObject) (GetKeyVersionByNumberResponseObject, error)
	// Retrieve all Systems
	// (GET /systems)
	GetAllSystems(ctx context.Context, request GetAllSystemsRequestObject) (GetAllSystemsResponseObject, error)
	// Retrieve a System
	// (GET /systems/{systemID})
	GetSystemByID(ctx context.Context, request GetSystemByIDRequestObject) (GetSystemByIDResponseObject, error)
	// Delete a System link
	// (DELETE /systems/{systemID}/link)
	DeleteSystemLinkByID(ctx context.Context, request DeleteSystemLinkByIDRequestObject) (DeleteSystemLinkByIDResponseObject, error)
	// Retrieve a System link
	// (GET /systems/{systemID}/link)
	GetSystemLinkByID(ctx context.Context, request GetSystemLinkByIDRequestObject) (GetSystemLinkByIDResponseObject, error)
	// Update a System link
	// (PATCH /systems/{systemID}/link)
	PatchSystemLinkByID(ctx context.Context, request PatchSystemLinkByIDRequestObject) (PatchSystemLinkByIDResponseObject, error)
	// Get the tenants
	// (GET /tenants)
	GetTenants(ctx context.Context, request GetTenantsRequestObject) (GetTenantsResponseObject, error)
	// Get tenant keystores
	// (GET /tenants/keystores)
	GetTenantsKeystores(ctx context.Context, request GetTenantsKeystoresRequestObject) (GetTenantsKeystoresResponseObject, error)
	// Get all Workflows
	// (GET /workflows)
	GetWorkflows(ctx context.Context, request GetWorkflowsRequestObject) (GetWorkflowsResponseObject, error)
	// Create a new Workflow
	// (POST /workflows)
	CreateWorkflow(ctx context.Context, request CreateWorkflowRequestObject) (CreateWorkflowResponseObject, error)
	// Get a Workflow
	// (GET /workflows/{workflowID})
	GetWorkflowByID(ctx context.Context, request GetWorkflowByIDRequestObject) (GetWorkflowByIDResponseObject, error)
	// Get the list of Workflow approvers.
	// (GET /workflows/{workflowID}/approvers)
	ListWorkflowApproversByWorkflowID(ctx context.Context, request ListWorkflowApproversByWorkflowIDRequestObject) (ListWorkflowApproversByWorkflowIDResponseObject, error)
	// Add Workflow approvers.
	// (POST /workflows/{workflowID}/approvers)
	AddWorkflowApproversByWorkflowID(ctx context.Context, request AddWorkflowApproversByWorkflowIDRequestObject) (AddWorkflowApproversByWorkflowIDResponseObject, error)
	// Trigger transition for a Workflow
	// (POST /workflows/{workflowID}/state)
	TransitionWorkflow(ctx context.Context, request TransitionWorkflowRequestObject) (TransitionWorkflowResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetGroups operation middleware
func (sh *strictHandler) GetGroups(w http.ResponseWriter, r *http.Request, params GetGroupsParams) {
	var request GetGroupsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetGroups(ctx, request.(GetGroupsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGroups")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetGroupsResponseObject); ok {
		if err := validResponse.VisitGetGroupsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateGroup operation middleware
func (sh *strictHandler) CreateGroup(w http.ResponseWriter, r *http.Request) {
	var request CreateGroupRequestObject

	var body CreateGroupJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateGroup(ctx, request.(CreateGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateGroup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateGroupResponseObject); ok {
		if err := validResponse.VisitCreateGroupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteGroupByID operation middleware
func (sh *strictHandler) DeleteGroupByID(w http.ResponseWriter, r *http.Request, groupID GroupIDPath) {
	var request DeleteGroupByIDRequestObject

	request.GroupID = groupID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteGroupByID(ctx, request.(DeleteGroupByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteGroupByID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteGroupByIDResponseObject); ok {
		if err := validResponse.VisitDeleteGroupByIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGroupByID operation middleware
func (sh *strictHandler) GetGroupByID(w http.ResponseWriter, r *http.Request, groupID GroupIDPath) {
	var request GetGroupByIDRequestObject

	request.GroupID = groupID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetGroupByID(ctx, request.(GetGroupByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGroupByID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetGroupByIDResponseObject); ok {
		if err := validResponse.VisitGetGroupByIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateGroup operation middleware
func (sh *strictHandler) UpdateGroup(w http.ResponseWriter, r *http.Request, groupID GroupIDPath) {
	var request UpdateGroupRequestObject

	request.GroupID = groupID

	var body UpdateGroupApplicationMergePatchPlusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateGroup(ctx, request.(UpdateGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateGroup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateGroupResponseObject); ok {
		if err := validResponse.VisitUpdateGroupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteLabel operation middleware
func (sh *strictHandler) DeleteLabel(w http.ResponseWriter, r *http.Request, keyID KeyIDPath, labelName string) {
	var request DeleteLabelRequestObject

	request.KeyID = keyID
	request.LabelName = labelName

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteLabel(ctx, request.(DeleteLabelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteLabel")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteLabelResponseObject); ok {
		if err := validResponse.VisitDeleteLabelResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetKeyLabels operation middleware
func (sh *strictHandler) GetKeyLabels(w http.ResponseWriter, r *http.Request, keyID KeyIDPath, params GetKeyLabelsParams) {
	var request GetKeyLabelsRequestObject

	request.KeyID = keyID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeyLabels(ctx, request.(GetKeyLabelsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeyLabels")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetKeyLabelsResponseObject); ok {
		if err := validResponse.VisitGetKeyLabelsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateOrUpdateLabels operation middleware
func (sh *strictHandler) CreateOrUpdateLabels(w http.ResponseWriter, r *http.Request, keyID KeyIDPath) {
	var request CreateOrUpdateLabelsRequestObject

	request.KeyID = keyID

	var body CreateOrUpdateLabelsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOrUpdateLabels(ctx, request.(CreateOrUpdateLabelsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOrUpdateLabels")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateOrUpdateLabelsResponseObject); ok {
		if err := validResponse.VisitCreateOrUpdateLabelsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetKeyConfigurations operation middleware
func (sh *strictHandler) GetKeyConfigurations(w http.ResponseWriter, r *http.Request, params GetKeyConfigurationsParams) {
	var request GetKeyConfigurationsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeyConfigurations(ctx, request.(GetKeyConfigurationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeyConfigurations")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetKeyConfigurationsResponseObject); ok {
		if err := validResponse.VisitGetKeyConfigurationsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostKeyConfigurations operation middleware
func (sh *strictHandler) PostKeyConfigurations(w http.ResponseWriter, r *http.Request) {
	var request PostKeyConfigurationsRequestObject

	var body PostKeyConfigurationsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostKeyConfigurations(ctx, request.(PostKeyConfigurationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKeyConfigurations")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostKeyConfigurationsResponseObject); ok {
		if err := validResponse.VisitPostKeyConfigurationsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteKeyConfigurationByID operation middleware
func (sh *strictHandler) DeleteKeyConfigurationByID(w http.ResponseWriter, r *http.Request, keyConfigurationID KeyConfigurationIDPath) {
	var request DeleteKeyConfigurationByIDRequestObject

	request.KeyConfigurationID = keyConfigurationID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteKeyConfigurationByID(ctx, request.(DeleteKeyConfigurationByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteKeyConfigurationByID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteKeyConfigurationByIDResponseObject); ok {
		if err := validResponse.VisitDeleteKeyConfigurationByIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetKeyConfigurationByID operation middleware
func (sh *strictHandler) GetKeyConfigurationByID(w http.ResponseWriter, r *http.Request, keyConfigurationID KeyConfigurationIDPath) {
	var request GetKeyConfigurationByIDRequestObject

	request.KeyConfigurationID = keyConfigurationID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeyConfigurationByID(ctx, request.(GetKeyConfigurationByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeyConfigurationByID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetKeyConfigurationByIDResponseObject); ok {
		if err := validResponse.VisitGetKeyConfigurationByIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateKeyConfigurationByID operation middleware
func (sh *strictHandler) UpdateKeyConfigurationByID(w http.ResponseWriter, r *http.Request, keyConfigurationID KeyConfigurationIDPath) {
	var request UpdateKeyConfigurationByIDRequestObject

	request.KeyConfigurationID = keyConfigurationID

	var body UpdateKeyConfigurationByIDApplicationMergePatchPlusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateKeyConfigurationByID(ctx, request.(UpdateKeyConfigurationByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateKeyConfigurationByID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateKeyConfigurationByIDResponseObject); ok {
		if err := validResponse.VisitUpdateKeyConfigurationByIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetKeyConfigurationsCertificates operation middleware
func (sh *strictHandler) GetKeyConfigurationsCertificates(w http.ResponseWriter, r *http.Request, keyConfigurationID KeyConfigurationIDPath, params GetKeyConfigurationsCertificatesParams) {
	var request GetKeyConfigurationsCertificatesRequestObject

	request.KeyConfigurationID = keyConfigurationID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeyConfigurationsCertificates(ctx, request.(GetKeyConfigurationsCertificatesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeyConfigurationsCertificates")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetKeyConfigurationsCertificatesResponseObject); ok {
		if err := validResponse.VisitGetKeyConfigurationsCertificatesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTagsForKeyConfiguration operation middleware
func (sh *strictHandler) GetTagsForKeyConfiguration(w http.ResponseWriter, r *http.Request, keyConfigurationID KeyConfigurationIDPath, params GetTagsForKeyConfigurationParams) {
	var request GetTagsForKeyConfigurationRequestObject

	request.KeyConfigurationID = keyConfigurationID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTagsForKeyConfiguration(ctx, request.(GetTagsForKeyConfigurationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTagsForKeyConfiguration")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTagsForKeyConfigurationResponseObject); ok {
		if err := validResponse.VisitGetTagsForKeyConfigurationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddTagsToKeyConfiguration operation middleware
func (sh *strictHandler) AddTagsToKeyConfiguration(w http.ResponseWriter, r *http.Request, keyConfigurationID KeyConfigurationIDPath) {
	var request AddTagsToKeyConfigurationRequestObject

	request.KeyConfigurationID = keyConfigurationID

	var body AddTagsToKeyConfigurationJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AddTagsToKeyConfiguration(ctx, request.(AddTagsToKeyConfigurationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddTagsToKeyConfiguration")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AddTagsToKeyConfigurationResponseObject); ok {
		if err := validResponse.VisitAddTagsToKeyConfigurationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetKeys operation middleware
func (sh *strictHandler) GetKeys(w http.ResponseWriter, r *http.Request, params GetKeysParams) {
	var request GetKeysRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeys(ctx, request.(GetKeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeys")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetKeysResponseObject); ok {
		if err := validResponse.VisitGetKeysResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostKeys operation middleware
func (sh *strictHandler) PostKeys(w http.ResponseWriter, r *http.Request) {
	var request PostKeysRequestObject

	var body PostKeysJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostKeys(ctx, request.(PostKeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKeys")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostKeysResponseObject); ok {
		if err := validResponse.VisitPostKeysResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteKeysKeyID operation middleware
func (sh *strictHandler) DeleteKeysKeyID(w http.ResponseWriter, r *http.Request, keyID KeyIDPath) {
	var request DeleteKeysKeyIDRequestObject

	request.KeyID = keyID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteKeysKeyID(ctx, request.(DeleteKeysKeyIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteKeysKeyID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteKeysKeyIDResponseObject); ok {
		if err := validResponse.VisitDeleteKeysKeyIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetKeysKeyID operation middleware
func (sh *strictHandler) GetKeysKeyID(w http.ResponseWriter, r *http.Request, keyID KeyIDPath) {
	var request GetKeysKeyIDRequestObject

	request.KeyID = keyID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeysKeyID(ctx, request.(GetKeysKeyIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeysKeyID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetKeysKeyIDResponseObject); ok {
		if err := validResponse.VisitGetKeysKeyIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateKey operation middleware
func (sh *strictHandler) UpdateKey(w http.ResponseWriter, r *http.Request, keyID KeyIDPath) {
	var request UpdateKeyRequestObject

	request.KeyID = keyID

	var body UpdateKeyApplicationMergePatchPlusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateKey(ctx, request.(UpdateKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateKey")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateKeyResponseObject); ok {
		if err := validResponse.VisitUpdateKeyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ImportKeyMaterial operation middleware
func (sh *strictHandler) ImportKeyMaterial(w http.ResponseWriter, r *http.Request, keyID KeyIDPath) {
	var request ImportKeyMaterialRequestObject

	request.KeyID = keyID

	var body ImportKeyMaterialJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ImportKeyMaterial(ctx, request.(ImportKeyMaterialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ImportKeyMaterial")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ImportKeyMaterialResponseObject); ok {
		if err := validResponse.VisitImportKeyMaterialResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetKeyImportParams operation middleware
func (sh *strictHandler) GetKeyImportParams(w http.ResponseWriter, r *http.Request, keyID KeyIDPath) {
	var request GetKeyImportParamsRequestObject

	request.KeyID = keyID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeyImportParams(ctx, request.(GetKeyImportParamsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeyImportParams")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetKeyImportParamsResponseObject); ok {
		if err := validResponse.VisitGetKeyImportParamsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetKeyVersions operation middleware
func (sh *strictHandler) GetKeyVersions(w http.ResponseWriter, r *http.Request, keyID KeyIDPath, params GetKeyVersionsParams) {
	var request GetKeyVersionsRequestObject

	request.KeyID = keyID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeyVersions(ctx, request.(GetKeyVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeyVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetKeyVersionsResponseObject); ok {
		if err := validResponse.VisitGetKeyVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateKeyVersion operation middleware
func (sh *strictHandler) CreateKeyVersion(w http.ResponseWriter, r *http.Request, keyID KeyIDPath) {
	var request CreateKeyVersionRequestObject

	request.KeyID = keyID

	var body CreateKeyVersionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateKeyVersion(ctx, request.(CreateKeyVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateKeyVersion")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateKeyVersionResponseObject); ok {
		if err := validResponse.VisitCreateKeyVersionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetKeyVersionByNumber operation middleware
func (sh *strictHandler) GetKeyVersionByNumber(w http.ResponseWriter, r *http.Request, keyID KeyIDPath, version KeyVersionNumberPath) {
	var request GetKeyVersionByNumberRequestObject

	request.KeyID = keyID
	request.Version = version

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeyVersionByNumber(ctx, request.(GetKeyVersionByNumberRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeyVersionByNumber")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetKeyVersionByNumberResponseObject); ok {
		if err := validResponse.VisitGetKeyVersionByNumberResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllSystems operation middleware
func (sh *strictHandler) GetAllSystems(w http.ResponseWriter, r *http.Request, params GetAllSystemsParams) {
	var request GetAllSystemsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllSystems(ctx, request.(GetAllSystemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllSystems")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllSystemsResponseObject); ok {
		if err := validResponse.VisitGetAllSystemsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSystemByID operation middleware
func (sh *strictHandler) GetSystemByID(w http.ResponseWriter, r *http.Request, systemID SystemIDPath) {
	var request GetSystemByIDRequestObject

	request.SystemID = systemID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSystemByID(ctx, request.(GetSystemByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSystemByID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSystemByIDResponseObject); ok {
		if err := validResponse.VisitGetSystemByIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSystemLinkByID operation middleware
func (sh *strictHandler) DeleteSystemLinkByID(w http.ResponseWriter, r *http.Request, systemID SystemIDPath) {
	var request DeleteSystemLinkByIDRequestObject

	request.SystemID = systemID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSystemLinkByID(ctx, request.(DeleteSystemLinkByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSystemLinkByID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteSystemLinkByIDResponseObject); ok {
		if err := validResponse.VisitDeleteSystemLinkByIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSystemLinkByID operation middleware
func (sh *strictHandler) GetSystemLinkByID(w http.ResponseWriter, r *http.Request, systemID SystemIDPath) {
	var request GetSystemLinkByIDRequestObject

	request.SystemID = systemID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSystemLinkByID(ctx, request.(GetSystemLinkByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSystemLinkByID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSystemLinkByIDResponseObject); ok {
		if err := validResponse.VisitGetSystemLinkByIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchSystemLinkByID operation middleware
func (sh *strictHandler) PatchSystemLinkByID(w http.ResponseWriter, r *http.Request, systemID SystemIDPath) {
	var request PatchSystemLinkByIDRequestObject

	request.SystemID = systemID

	var body PatchSystemLinkByIDApplicationMergePatchPlusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchSystemLinkByID(ctx, request.(PatchSystemLinkByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchSystemLinkByID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchSystemLinkByIDResponseObject); ok {
		if err := validResponse.VisitPatchSystemLinkByIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTenants operation middleware
func (sh *strictHandler) GetTenants(w http.ResponseWriter, r *http.Request, params GetTenantsParams) {
	var request GetTenantsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTenants(ctx, request.(GetTenantsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTenants")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTenantsResponseObject); ok {
		if err := validResponse.VisitGetTenantsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTenantsKeystores operation middleware
func (sh *strictHandler) GetTenantsKeystores(w http.ResponseWriter, r *http.Request) {
	var request GetTenantsKeystoresRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTenantsKeystores(ctx, request.(GetTenantsKeystoresRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTenantsKeystores")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTenantsKeystoresResponseObject); ok {
		if err := validResponse.VisitGetTenantsKeystoresResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkflows operation middleware
func (sh *strictHandler) GetWorkflows(w http.ResponseWriter, r *http.Request, params GetWorkflowsParams) {
	var request GetWorkflowsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkflows(ctx, request.(GetWorkflowsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWorkflows")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWorkflowsResponseObject); ok {
		if err := validResponse.VisitGetWorkflowsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateWorkflow operation middleware
func (sh *strictHandler) CreateWorkflow(w http.ResponseWriter, r *http.Request, params CreateWorkflowParams) {
	var request CreateWorkflowRequestObject

	request.Params = params

	var body CreateWorkflowJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateWorkflow(ctx, request.(CreateWorkflowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateWorkflow")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateWorkflowResponseObject); ok {
		if err := validResponse.VisitCreateWorkflowResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkflowByID operation middleware
func (sh *strictHandler) GetWorkflowByID(w http.ResponseWriter, r *http.Request, workflowID WorkflowIDPath) {
	var request GetWorkflowByIDRequestObject

	request.WorkflowID = workflowID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkflowByID(ctx, request.(GetWorkflowByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWorkflowByID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWorkflowByIDResponseObject); ok {
		if err := validResponse.VisitGetWorkflowByIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListWorkflowApproversByWorkflowID operation middleware
func (sh *strictHandler) ListWorkflowApproversByWorkflowID(w http.ResponseWriter, r *http.Request, workflowID WorkflowIDPath, params ListWorkflowApproversByWorkflowIDParams) {
	var request ListWorkflowApproversByWorkflowIDRequestObject

	request.WorkflowID = workflowID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListWorkflowApproversByWorkflowID(ctx, request.(ListWorkflowApproversByWorkflowIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListWorkflowApproversByWorkflowID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListWorkflowApproversByWorkflowIDResponseObject); ok {
		if err := validResponse.VisitListWorkflowApproversByWorkflowIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddWorkflowApproversByWorkflowID operation middleware
func (sh *strictHandler) AddWorkflowApproversByWorkflowID(w http.ResponseWriter, r *http.Request, workflowID WorkflowIDPath, params AddWorkflowApproversByWorkflowIDParams) {
	var request AddWorkflowApproversByWorkflowIDRequestObject

	request.WorkflowID = workflowID
	request.Params = params

	var body AddWorkflowApproversByWorkflowIDJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AddWorkflowApproversByWorkflowID(ctx, request.(AddWorkflowApproversByWorkflowIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddWorkflowApproversByWorkflowID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AddWorkflowApproversByWorkflowIDResponseObject); ok {
		if err := validResponse.VisitAddWorkflowApproversByWorkflowIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TransitionWorkflow operation middleware
func (sh *strictHandler) TransitionWorkflow(w http.ResponseWriter, r *http.Request, workflowID WorkflowIDPath, params TransitionWorkflowParams) {
	var request TransitionWorkflowRequestObject

	request.WorkflowID = workflowID
	request.Params = params

	var body TransitionWorkflowJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TransitionWorkflow(ctx, request.(TransitionWorkflowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TransitionWorkflow")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TransitionWorkflowResponseObject); ok {
		if err := validResponse.VisitTransitionWorkflowResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
